//------------Sonic CD StageFinish Script-------------//
//--------Scripted by Christian Whitehead 'The Taxman'--------//
//-------Unpacked By Rubberduckycooly's Script Unpacker-------//

// Aliases
#alias Object.Value0	:	Object.Timer
#alias Object.Value5	:	Object.TimeBonus
#alias Object.Value6	:	Object.RingBonus

// This can be Coins bonus too, depending on the current mode
#alias Object.Value7	:	Object.Continues

// All texts have their own X position values
#alias Object.XPos  	:	Object.LineXPos0
#alias Object.Value1	:	Object.LineXPos1
#alias Object.Value2	:	Object.LineXPos2
#alias Object.Value3	:	Object.LineXPos3
#alias Object.Value4	:	Object.LineXPos4

// States
#alias 0	:	STAGEFINISH_INIT
#alias 1	:	STAGEFINISH_FADEOUT
#alias 2	:	STAGEFINISH_FADEIN
#alias 3	:	STAGEFINISH_SCROLLTEXT
#alias 4	:	STAGEFINISH_DISPLAYTALLY
#alias 5	:	STAGEFINISH_TALLYDOWN
#alias 6	:	STAGEFINISH_DISPLAYFINAL
#alias 7	:	STAGEFINISH_LOADNORMAL
#alias 8	:	STAGEFINISH_LOADTIMEATTACK
#alias 9	:	STAGEFINISH_LOADLEVELSELECT

// Player Aliases
#alias 0	:	PLAYER_SONIC

// HUD Aliases
#alias Object.Value1	:	HUD.Time.Seconds
#alias Object.Value3	:	HUD.Rings

// Game modes
#alias 2	:	GAMEMODE_TIMEATTACK

// Language Aliases
#alias 0	:	LANGUAGE_ENGLISH
#alias 1	:	LANGUAGE_FRENCH
#alias 2	:	LANGUAGE_ITALIAN
#alias 3	:	LANGUAGE_DEUTSCH
#alias 4	:	LANGUAGE_SPANISH
#alias 5	:	LANGUAGE_JAPANESE

// SFX Aliases
#alias 16	:	SFX_SCOREADD
#alias 17	:	SFX_SCORETOTAL
#alias 19	:	SFX_SPECIALWARP
#alias 20	:	SFX_1UP
#alias 21	:	SFX_ACHIEVEMENT

// Soundtrack Aliases
#alias 0	:	SOUNDTRACK_JP

// Stage Aliases
#alias 0	:	STAGE_P_TITLESCREEN
#alias 2	:	STAGE_P_TIMEATTACK
#alias 4	:	STAGE_P_SOUNDTEST
#alias 7	:	STAGE_P_CREDITS


sub ObjectMain
	
	switch Object.State
	case STAGEFINISH_INIT
		// Setup the initial text line positions
		Object.LineXPos0 = -799
		Object.LineXPos1 = 1255
		Object.LineXPos2 = 1319
		Object.LineXPos3 = 1402
		Object.LineXPos4 = 1466
		
		Object.State = STAGEFINISH_FADEOUT
		Object.Timer = 0
		
		// Setup alpha, used for fading in the Time Stones
		Object.Alpha = 0
		Object.InkEffect = 2
		
#platform: Use_Origins
		// Some stuff for Origins, where we back up some cool values
		BackupSpecialStageListPos = SpecialStage.ListPos
		BackupTimeStones = SpecialStage.TimeStones
#endplatform
		
		if Object.PropertyValue > 0
			// Setup the Time Bonus
			Object.TimeBonus = HUD[4].Time.Seconds
			Object.TimeBonus *= 200
			
			// Set the corresponding Time Stone bit for this stage
			TempValue0 = Stage.ActNo
			TempValue0--
			
#platform: Use_Origins
			// Origins changed it up a bit
			SetBit(BackupTimeStones, TempValue0, true)
#endplatform

#platform: Use_Standalone
			SetBit(SpecialStage.TimeStones, TempValue0, true)
#endplatform
		else
			Object.TimeBonus = 0
		end if
		
#platform: Use_Origins
		// Backup the Player's Rings
		StageStatsUsabilityParam5 = HUD[4].Rings
		
		// Setup the Ring Bonus
		Object.RingBonus = HUD[4].Rings
		Object.RingBonus *= 200
		
		// Origins removed this pair of lines, in favour of using the Backup values instead
//		Stage.ListPos = SpecialStage.NextZone
//		Stage.ActiveList = REGULAR_STAGE
		
		if BackupTimeStones < 127
			TempValue0 = false
			while TempValue0 == false
				BackupSpecialStageListPos++
				if BackupSpecialStageListPos > 6
					BackupSpecialStageListPos = 0
				end if
				
				// Carrying through...
				GetBit(TempValue1, BackupTimeStones, BackupSpecialStageListPos)
//				GetBit(TempValue1, SpecialStage.TimeStones, SpecialStage.ListPos)
				
				if TempValue1 == false
					TempValue0 = true
				end if
			loop
		else
			TempValue0 = Stage.ListPos
			TempValue0 %= 10
			if TempValue0 == 9
				Stage.ListPos--
			end if
			
			Good_Future_Count = 2
			
			if Stage.PlayerListPos == PLAYER_SONIC
				// If all Stones are collected, unlock the "Treasure Hunter" achievement
				SetAchievement(8, 100)
			end if
		end if
		
		// There used to be duplicate saving here, but Origins actually optimised that! How nice of them
		
		// As a replacement for all that, let's just back up the Score instead
		recScore = Player.Score
		
#endplatform

#platform: Use_Standalone
		if SpecialStage.TimeStones < 127
			TempValue0 = false
			while TempValue0 == false
				SpecialStage.ListPos++
				if SpecialStage.ListPos > 6
					SpecialStage.ListPos = 0
				end if
				
				GetBit(TempValue1, SpecialStage.TimeStones, SpecialStage.ListPos)
				if TempValue1 == false
					TempValue0 = true
				end if
			loop
		else
			TempValue0 = Stage.ListPos
			TempValue0 %= 10
			if TempValue0 == 9
				Stage.ListPos--
			end if
			
			Good_Future_Count = 2
			
			if Stage.PlayerListPos == PLAYER_SONIC
				// If all Stones are collected, unlock the "Treasure Hunter" achievement
				SetAchievement(8, 100)
			end if
		end if
#endplatform
		break
		
	case STAGEFINISH_FADEOUT
		if Object.Timer == 120
			
			// More Origins changes
			// What's active is Origins, what's commented out is what was there before
#platform: Use_Origins
			Object.State = 10
#endplatform
#platform: Use_Standalone
			Object.State = STAGEFINISH_FADEIN
			Object.Timer = 256
			
			if SpecialStage.TimeStones > 126
				// If the player has all Stones, then turn this object into the "got 'em all" variant
				Object.PropertyValue = 2
			end if
			
			PlayMusic(1)
#endplatform
		else
			Object.Timer++
			Music.Volume--
			if Object.Timer == 24
				// Clear all game objects (aside from this one)
				
				// First do all the reserved object slots
				TempValue0 = 0
				while TempValue0 < 30
					ResetObjectEntity(TempValue0, TypeName[Blank Object], 0, 0, 0)
					TempValue0++
				loop
				
				// Then do all the game object slots
				TempValue0++
				while TempValue0 < 1184
					ResetObjectEntity(TempValue0, TypeName[Blank Object], 0, 0, 0)
					TempValue0++
				loop
				
				// Set all layers to not draw
				Stage.ActiveLayer[0] = 9
				Stage.ActiveLayer[1] = 9
				Stage.ActiveLayer[2] = 9
				Stage.ActiveLayer[3] = 9
				
				// Lock the player from doing stuff too
				Player.ControlMode = 0
				KeyDown[1].Left  = false
				KeyDown[1].Right = false
				Player.Direction = FACING_RIGHT
				
			end if
		end if
		
		TempValue0 = Object.Timer
		TempValue0 <<= 4
		if TempValue0 > 255
			TempValue0 = 255
		end if
		SetScreenFade(208, 255, 224, TempValue0)
		break
		
	case STAGEFINISH_FADEIN
		Object.Timer -= 16
		if Object.Timer == 0
			Object.State = STAGEFINISH_SCROLLTEXT
			
			// These following two lines were introduced in Origins
			Stage.ActiveList = REGULAR_STAGE
			Stage.ListPos = SpecialStage.NextZone
		end if
		
		SetScreenFade(208, 255, 224, Object.Timer)
		
		TempValue0 = Screen.CenterX
		TempValue0 -= 88
		if Object.LineXPos0 < TempValue0
			Object.LineXPos0 += 16
			if Object.LineXPos0 > TempValue0
				Object.LineXPos0 = TempValue0
			end if
		else
			Object.LineXPos0 = TempValue0
		end if
		
		TempValue0++
		if Object.LineXPos1 > TempValue0
			Object.LineXPos1 -= 16
			if Object.LineXPos1 < TempValue0
				Object.LineXPos1 = TempValue0
			end if
		else
			Object.LineXPos1 = TempValue0
		end if
		
		if Object.LineXPos2 > TempValue0
			Object.LineXPos2 -= 16
			if Object.LineXPos2 < TempValue0
				Object.LineXPos2 = TempValue0
			end if
		else
			Object.LineXPos2 = TempValue0
		end if
		
		if Object.LineXPos3 > TempValue0
			Object.LineXPos3 -= 16
			if Object.LineXPos3 < TempValue0
				Object.LineXPos3 = TempValue0
			end if
		else
			Object.LineXPos3 = TempValue0
		end if
		
		if Object.LineXPos4 > TempValue0
			Object.LineXPos4 -= 16
			if Object.LineXPos4 < TempValue0
				Object.LineXPos4 = TempValue0
			end if
		else
			Object.LineXPos4 = TempValue0
			Object.State = STAGEFINISH_DISPLAYTALLY
			Object.Timer = 0
		end if
		break
		
	case STAGEFINISH_SCROLLTEXT
		// Moving the text in
		
		TempValue0 = Screen.CenterX
		TempValue0 -= 88
		
		if Object.LineXPos0 < TempValue0
			Object.LineXPos0 += 16
			if Object.LineXPos0 > TempValue0
				Object.LineXPos0 = TempValue0
			end if
		else
			Object.LineXPos0 = TempValue0
		end if
		
		TempValue0++
		if Object.LineXPos1 > TempValue0
			Object.LineXPos1 -= 16
			if Object.LineXPos1 < TempValue0
				Object.LineXPos1 = TempValue0
			end if
		else
			Object.LineXPos1 = TempValue0
		end if
		
		if Object.LineXPos2 > TempValue0
			Object.LineXPos2 -= 16
			if Object.LineXPos2 < TempValue0
				Object.LineXPos2 = TempValue0
			end if
		else
			Object.LineXPos2 = TempValue0
		end if
		
		if Object.LineXPos3 > TempValue0
			Object.LineXPos3 -= 16
			if Object.LineXPos3 < TempValue0
				Object.LineXPos3 = TempValue0
			end if
		else
			Object.LineXPos3 = TempValue0
		end if
		
		if Object.LineXPos4 > TempValue0
			Object.LineXPos4 -= 16
			if Object.LineXPos4 < TempValue0
				Object.LineXPos4 = TempValue0
			end if
		else
			Object.LineXPos4 = TempValue0
			Object.State = STAGEFINISH_DISPLAYTALLY
			Object.Timer = 0
		end if
		break
		
	case STAGEFINISH_DISPLAYTALLY
		// Waiting for a bit, to let the player see what they got
		
		// Fade in the Stones
		if Object.Alpha < 255
			// TempValue0 is used to hold the target value since Object.Alpha is a byte, and therefore open to overflowing if too much is added
			TempValue0 = Object.Alpha
			TempValue0 += 8
			if TempValue0 > 255
				TempValue0 = 255
			end if
			
			Object.Alpha = TempValue0
		end if
		
		// The different soundtrack jingles have different lenghts, so account for that
		if Options.Soundtrack == SOUNDTRACK_JP
			Object.Timer++
			if Object.Timer > 299
				Object.Timer = 0
				Object.State = STAGEFINISH_TALLYDOWN
			end if
		else
			Object.Timer++
			if Object.Timer > 429
				Object.Timer = 0
				Object.State = STAGEFINISH_TALLYDOWN
			end if
		end if
		break
		
	case STAGEFINISH_TALLYDOWN
		// Tally up the bonuses, rings first then time
		if Object.RingBonus > 0
			Object.RingBonus -= 200
			Player.Score += 200
			if Object.RingBonus < 0
				Player.Score += Object.RingBonus
				Object.RingBonus = 0
			end if
		else
			if Object.TimeBonus > 0
				Object.TimeBonus -= 200
				Player.Score += 200
				if Object.TimeBonus < 0
					Player.Score += Object.TimeBonus
					Object.TimeBonus = 0
				end if
			end if
		end if
		
		if Player.Score >= Player.ScoreBonus
			Object.Continues++
			
#platform: Use_Origins
			// In Origins, give either Coins or Lives based on the current mode
			if game.coinMode == false
				Player.Lives++
			else
				game.callbackParam0 = 1
				EngineCallback(NOTIFY_ADD_COIN)
			end if
#endplatform

#platform: Use_Standalone
			Player.Lives++
#endplatform
			Player.ScoreBonus += 50000
			
			if Stage.PlayerListPos == PLAYER_SONIC
				PlaySfx(SFX_1UP, false)
			else
				PlaySfx(SFX_ACHIEVEMENT, false)
			end if
		end if
		
		CheckGreater(Object.RingBonus, 0)
		TempValue0 = CheckResult
		CheckGreater(Object.TimeBonus, 0)
		TempValue0 |= CheckResult
		if TempValue0 == true
			Object.Timer++
			
			if Object.Timer == 2
				PlaySfx(SFX_SCOREADD, false)
				Object.Timer = 0
			end if
		else
			// The tally's done, proceed
			Object.State = STAGEFINISH_DISPLAYFINAL
			Object.Timer = 0
			
			// And of course, the signature kaching!
			PlaySfx(SFX_SCORETOTAL, false)
		end if
		break
		
	case STAGEFINISH_DISPLAYFINAL
		// Wait some more, letting the player see what they *really* got
		Object.Timer++
		if Object.Timer == 160
			Object.Timer = 0
			Object.State = STAGEFINISH_LOADNORMAL
			if Object[0].Type == TypeName[Blank Object]
				PlaySfx(SFX_SPECIALWARP, false)
			end if
		end if
		break
		
	case STAGEFINISH_LOADNORMAL
		if Object[0].Type == TypeName[Blank Object]
			Object.Timer += 8
			SetScreenFade(208, 255, 224, Object.Timer)
			if Object.Timer == 1024
				if Options.GameMode == 1
					
					// Save the Player's progress
					// This used to be useless, because the Player's progress was already saved previously in the Object,
					// but Origins removed that duplicate, and now this whole section actually serves a purpose now
					
					ArrayPos1 = Options.SaveSlot
					ArrayPos1 <<= 3
					
					SaveRAM[ArrayPos1] = Stage.PlayerListPos
					
					ArrayPos1++
					SaveRAM[ArrayPos1] = Player.Lives
					
					ArrayPos1++
					SaveRAM[ArrayPos1] = Player.Score
					
					ArrayPos1++
					SaveRAM[ArrayPos1] = Stage.ListPos
					SaveRAM[ArrayPos1]++
					
					ArrayPos1++
					SaveRAM[ArrayPos1] = SpecialStage.TimeStones
					
					ArrayPos1++
					SaveRAM[ArrayPos1] = SpecialStage.ListPos
					
					ArrayPos1++
					SaveRAM[ArrayPos1] = Player.ScoreBonus
					
					// This bump in particular, it doesn't do anything, does it?
					ArrayPos1++
					
					WriteSaveRAM()
				end if
				
				// A small Origins tweak - backup the Player's score (again)
				// So I guess in return for one redundancy loss, we got another one in return...
#platform: Use_Origins
				recScore = Player.Score
#endplatform
				
				// Write the correct colours to Fade_Colour so that the maingame fades back in with the same white
				Fade_Colour = 208
				Fade_Colour <<= 16
				TempValue0 = 255
				TempValue0 <<= 8
				Fade_Colour += TempValue0
				Fade_Colour += 224
				
				// Now, let the game know how many Rings we got
#platform: Use_Origins
				game.callbackParam0 = StageStatsUsabilityParam5
				EngineCallback(NOTIFY_STATS_RING)
				
				// Reset the variable for future use
				StageStatsUsabilityParam5 = 0
#endplatform
				if Stage.ListPos < Stage.ListSize
					LoadStage()
				else
					// This should never happen, but you're somehow supposed to go to a stage that doesn't exist, so
					// just go back to the title screen instead
					Stage.ActiveList = PRESENTATION_STAGE
					Stage.ListPos = STAGE_P_TITLESCREEN
					LoadStage()
				end if
			end if
		end if
		break
		
	case STAGEFINISH_LOADTIMEATTACK
		if Object.Timer < 480
			Object.Timer += 4
			Music.Volume--
		else
			StopMusic()
			
			// Save the Time Attack results
			TimeAttack.Result = Stage.Seconds
			TimeAttack.Result *= 100
			TempValue0 = Stage.Minutes
			TempValue0 *= 6000
			TimeAttack.Result += TempValue0
			TimeAttack.Result += Stage.MilliSeconds
			
			// Load the Time Attack Menu
			// This is an extremely minor change, but Origins changed this part to be more in line with
			//  other stage setting code, where active list is set first and then list pos comes after
			// Before that, this part had list pos and then active list, which was quite odd...
			Stage.ActiveList = PRESENTATION_STAGE
			Stage.ListPos = STAGE_P_TIMEATTACK
			
			LoadStage()
		end if
		
		SetScreenFade(0, 0, 0, Object.Timer)
		break
		
	case STAGEFINISH_LOADLEVELSELECT
		// Used when exiting the hidden Robotnik stage
		
		if Object.Timer < 480
			Object.Timer += 4
			Music.Volume--
		else
			// Load the credits scene
			
			StopMusic()
			
			// Similarly to the above, this spot used to be out-of-order until Origins came and fixed it
			// One strange thing through, it changed it from the Credits to be the Sound Test instead?
			// I have no idea if that was an intentional change or not, but it's strange...
			
			Stage.ActiveList = PRESENTATION_STAGE
			
#platform: Use_Origins
			// Origins  -I still have no idea, to be honest...
			Stage.ListPos = STAGE_P_SOUNDTEST
#endplatform

#platform: Use_Standalone
			// Original - go to the credits
			Stage.ListPos = STAGE_P_CREDITS
#endplatform
			LoadStage()
		end if
		
		SetScreenFade(0, 0, 0, Object.Timer)
		break

#platform: Use_Origins
		// the Origins folk left an extra break in here lol
		// This code never hits anyways, so I guess it's fine?
		break
		
	case 10
		
		// TODO: document these, once it's learned how origins callbacks exactly work
		
		game.callbackResult = -1
		
		if Object.PropertyValue == 0
			game.callbackParam0 = 0
		else
			game.callbackParam0 = 1
		end if
		
		game.callbackParam1 = BackupSpecialStageListPos
		game.callbackParam2 = BackupTimeStones
		EngineCallback(NOTIFY_SPECIAL_RETRY)
		Object.State = 11
		SetScreenFade(208, 255, 224, 255)
		break
		
	case 11
		if game.callbackResult >= false
			SpecialStage.ListPos = BackupSpecialStageListPos
			SpecialStage.TimeStones = BackupTimeStones
			
			if Options.GameMode == 1
				ArrayPos1 = Options.SaveSlot
				ArrayPos1 <<= 3
				
				SaveRAM[ArrayPos1] = Stage.PlayerListPos
				
				ArrayPos1++
				SaveRAM[ArrayPos1] = Player.Lives
				
				ArrayPos1++
				SaveRAM[ArrayPos1] = Player.Score
				
				ArrayPos1++
				SaveRAM[ArrayPos1] = Stage.ListPos
				SaveRAM[ArrayPos1]++
				
				ArrayPos1++
				SaveRAM[ArrayPos1] = SpecialStage.TimeStones
				
				ArrayPos1++
				SaveRAM[ArrayPos1] = SpecialStage.ListPos
				
				ArrayPos1++
				SaveRAM[ArrayPos1] = Player.ScoreBonus
				
				ArrayPos1++
				
				WriteSaveRAM()
			end if
			
			if Options.GameMode == GAMEMODE_TIMEATTACK
				
				// Save up the Time Attack results
				
				TimeAttack.Result = Stage.Seconds
				TimeAttack.Result *= 100
				
				TempValue0 = Stage.Minutes
				TempValue0 *= 6000
				
				TimeAttack.Result += TempValue0
				TimeAttack.Result += Stage.MilliSeconds
				
				// Load the Time Attack menu
				Stage.ActiveList = PRESENTATION_STAGE
				Stage.ListPos = STAGE_P_TIMEATTACK
				
				LoadStage()
			else
				Object.State = 2
				Object.Timer = 256
				if SpecialStage.TimeStones > 126
					Object.PropertyValue = 2
					EngineCallback(NOTIFY_STATS_PARAM_2)
				end if
				
				PlayMusic(1)
			end if
		end if
		
		SetScreenFade(208, 255, 224, 255)
		break
#endplatform
	end switch
	
end sub


sub ObjectDraw
	
	if Object.State != STAGEFINISH_LOADLEVELSELECT
		if Object.State > STAGEFINISH_FADEOUT
			
			// Draw the Background
			TempValue0 = 0
			while TempValue0 < 240
				TempValue1 = 0
				while TempValue1 < 360
					DrawSpriteScreenXY(0, TempValue1, TempValue0)
					TempValue1 += 224
				loop
				
				TempValue0 += 48
			loop
			
			// Draw all the Time Stones the player has so far
			// - TempValue0 is the current Stone
			// - TempValue1 is the starting Sprite Frame ID for the Stones
			// - TempValue2 is the draw position for the Stones
			// - TempValue3 is either true or false based if the current Time Stone is obtained
			TempValue0 = 0
			TempValue1 = 20
			TempValue2 = Screen.CenterX
			TempValue2 -= 79
			
			while TempValue0 < 7
				
				// See if the Player has the current Time Stone
				GetBit(TempValue3, SpecialStage.TimeStones, TempValue0)
				
				// Bump up the index, for next loop around
				TempValue0++
				
				// If the Player has the Time Stone, then draw it
				if TempValue3 == true
					DrawSpriteScreenFX(TempValue1, FX_INK, TempValue2, 81)
				end if
				
				TempValue1++
				
				// Each Stone is drawn 24 px apart from each other's center
				TempValue2 += 24
			loop
		end if
		
		// Draw the main text, depending on what the current results type is
		switch Object.PropertyValue
		case 0
			// "SPECIAL ZONE"
			DrawSpriteScreenXY(1, Object.XPos, 50)
			break
			
		case 1
			// "TIME STONES"
			DrawSpriteScreenXY(2, Object.XPos, 50)
			break
			
		case 2
			// "GOT THEM ALL!!"
			DrawSpriteScreenXY(3, Object.XPos, 50)
			break
			
		end switch
		
		// Draw the Score text
		DrawSpriteScreenXY(4, Object.LineXPos1, 105)
		
		// Draw the Player's Score
		TempValue0 = Object.LineXPos1
		TempValue0 += 176
		DrawNumbers(10, TempValue0, 105, Player.Score, 6, 8, false)
		
		// Then, the Ring Bonus line
		
		// First, draw the "RING" sprite
		DrawSpriteScreenXY(5, Object.LineXPos2, 129)
		
		TempValue0 = Object.LineXPos2
		TempValue0 += 40
		
		// Then, 40 pixels to the right of that, draw the "BONUS" sprite
		DrawSpriteScreenXY(7, TempValue0, 129)
		
		// And at the end of the line, draw the Ring Bonus count
		TempValue0 += 136
		DrawNumbers(10, TempValue0, 129, Object.RingBonus, 5, 8, false)
		
		// Line 3, holds the Time Bonus text
		
		// First, the "TIME" sprite
		DrawSpriteScreenXY(6, Object.LineXPos3, 153)
		
		TempValue0 = Object.LineXPos3
		TempValue0 += 40
		
		// Then, 40 pixels to the right, the "BONUS" frame
		DrawSpriteScreenXY(7, TempValue0, 153)
		
		// And at the end of this line too, draw the Time Bonus numbers
		TempValue0 += 136
		DrawNumbers(10, TempValue0, 153, Object.TimeBonus, 5, 8, false)
		
		// Line 4, holds either Continues or Coins based on the current mode
#platform: Use_Origins
		if game.coinMode == false
			
			// Draw the "EXTRA LIVES" text
			
			// First, is "EXTRA"
			DrawSpriteScreenXY(8, Object.LineXPos4, 177)
			
			TempValue0 = Object.LineXPos4
			TempValue0 += 49
			
			// Then after than of course, comes "LIVES"
			DrawSpriteScreenXY(9, TempValue0, 177)
			
		else
			
			// Draw the "COINS BONUS" text
			
			// First, comes "COINS"
			DrawSpriteScreenXY(35, Object.LineXPos4, 177)
			
			TempValue0 = Object.LineXPos4
			TempValue0 += 40
			
			// Then to the right of that, is "BONUS"
			DrawSpriteScreenXY(7, TempValue0, 177)
			
			// And then bump up the position for the icons to be drawn at
			TempValue0 += 9
			
		end if
#endplatform

#platform: Use_Standalone
		// Draw the "EXTRA LIVES" text
		
		// First, is "EXTRA"
		DrawSpriteScreenXY(8, Object.LineXPos4, 177)
		
		TempValue0 = Object.LineXPos4
		TempValue0 += 49
		
		// Then after than of course, comes "LIVES"
		DrawSpriteScreenXY(9, TempValue0, 177)
#endplatform

		// Move to the end of the line
		TempValue0 += 86
		
		// Animate the mini-character
		Object.Frame++
		Object.Frame &= 15
		
		// Get the base frame the mini-character should use
		TempValue1 = Object.Frame
		TempValue1 >>= 3
		
		// Bump it up to match its corresponding Sprite Frame ID
		TempValue1 += 27
		
		// (The Coins and Continues bonus use the same variable, just labelled as Continues here)
		TempValue2 = Object.Continues
		
		// Now, draw either Continues or coins
#platform: Use_Origins
		if game.coinMode == false
			
			// Draw Continues
			
			while TempValue2 > 0
				DrawSpriteScreenXY(TempValue1, TempValue0, 177)
				TempValue2--
				
				TempValue0 += 24
			loop
			
		else
			
			if TempValue2 > 0
				TempValue0 += 12
				
				// This TempValue1, it isn't used anywhere, is it?
				// It corresponds with the following Sprite Frame ID, perhaps it was used for that before...
				TempValue1 = 29
				
				// Draw the Coins icon
				DrawSpriteScreenXY(29, TempValue0, 177)
				
				// And then an x1 next to it
				DrawSpriteScreenXY(30, TempValue0, 177)
				
				// And then make the Coin sparkle
				TempValue1 = Object.Frame
				TempValue1 >>= 2
				
				// From that sparkle frame, but it up by 31 to match the Sprite Frame IDs
				TempValue1 += 31
				
				// And now, draw the sparkle on top of the Coin
				DrawSpriteScreenXY(TempValue1, TempValue0, 177)
			end if
			
		end if
#endplatform

#platform: Use_Standalone
		while TempValue2 > 0
			DrawSpriteScreenXY(TempValue1, TempValue0, 177)
			TempValue2--
			TempValue0 += 24
		loop
#endplatform

	end if
end sub



sub ObjectStartup
	
	// Load the correct sheet based on the current language
	switch Engine.Language
	case LANGUAGE_ENGLISH
	case LANGUAGE_JAPANESE
		// English and Japanese use the same sheet (the English sheet)
		LoadSpriteSheet("Special/ScoreScreen.gif")
		break
		
	case LANGUAGE_FRENCH
		LoadSpriteSheet("Special/ScoreScreen_FR.gif")
		break
		
	case LANGUAGE_ITALIAN
		LoadSpriteSheet("Special/ScoreScreen_IT.gif")
		break
		
	case LANGUAGE_DEUTSCH
		LoadSpriteSheet("Special/ScoreScreen_DE.gif")
		break
		
	case LANGUAGE_SPANISH
		LoadSpriteSheet("Special/ScoreScreen_ES.gif")
		break
		
	end switch
	
	// 0 - Background
	SpriteFrame(0, 0, 224, 48, 0, 63)
	
	// 1 - "SPECIAL ZONE" Text
	SpriteFrame(0, 0, 184, 14, 1, 1)
	
	// 2 - "TIME STONES" Text
	SpriteFrame(9, 0, 167, 14, 1, 16)
	
	// 3 - "GOT THEM ALL!!" Text
	SpriteFrame(-16, 0, 205, 14, 1, 48)
	
	// 4 - "SCORE" Text
	SpriteFrame(0, 0, 39, 11, 1, 112)
	
	// 5 - "RING" Text
	SpriteFrame(0, 0, 31, 11, 41, 112)
	
	// 6 - "TIME" Text
	SpriteFrame(0, 0, 31, 11, 73, 112)
	
	// 7 - "BONUS" Text
	SpriteFrame(0, 0, 41, 11, 105, 112)
	
	// 8 - "EXTRA" Text
	SpriteFrame(0, 0, 40, 11, 147, 112)
	
	// 9 - "LIVES" Text
	SpriteFrame(0, 0, 36, 11, 188, 112)
	
	// 10-19 - Numbers 0-9
	SpriteFrame(0, 0, 8, 11, 220, 1)
	SpriteFrame(0, 0, 8, 11, 229, 1)
	SpriteFrame(0, 0, 8, 11, 238, 1)
	SpriteFrame(0, 0, 8, 11, 247, 1)
	SpriteFrame(0, 0, 8, 11, 220, 13)
	SpriteFrame(0, 0, 8, 11, 229, 13)
	SpriteFrame(0, 0, 8, 11, 238, 13)
	SpriteFrame(0, 0, 8, 11, 247, 13)
	SpriteFrame(0, 0, 8, 11, 238, 25)
	SpriteFrame(0, 0, 8, 11, 247, 25)
	
	// 20-26 - Time Stones
	SpriteFrame(0, 0, 16, 16, 1, 31)
	SpriteFrame(0, 0, 16, 16, 18, 31)
	SpriteFrame(0, 0, 16, 16, 35, 31)
	SpriteFrame(0, 0, 16, 16, 52, 31)
	SpriteFrame(0, 0, 16, 16, 69, 31)
	SpriteFrame(0, 0, 16, 16, 86, 31)
	SpriteFrame(0, 0, 16, 16, 103, 31)
	
	// 27-28 - Small Player Icons
	if Stage.PlayerListPos == PLAYER_SONIC
		SpriteFrame(0, 0, 16, 23, 169, 24)
		SpriteFrame(0, 0, 16, 23, 186, 24)
	else
		SpriteFrame(0, 0, 16, 23, 139, 203)
		SpriteFrame(0, 0, 16, 23, 156, 203)
	end if

	// These below ones are new to Origins
	
	// 29 - Coins icon
	SpriteFrame(0, -4, 18, 16, 204, 29)
	
	// 30 - "x1"
	SpriteFrame(18, -4, 32, 16, 187, 1)
	
	// 31-34 - Sparkle Frames
	SpriteFrame(-4, -8, 24, 24, 130, 125)
	SpriteFrame(-4, -8, 24, 24, 155, 125)
	SpriteFrame(-4, -8, 24, 24, 130, 150)
	SpriteFrame(-4, -8, 24, 24, 155, 150)
	
	// 35 - "COIN" text, in the context of "Coin Bonus"
	SpriteFrame(0, 0, 31, 11, 130, 175)
	
end sub


// ========================
// Editor Subs
// ========================

sub RSDKDraw
	DrawSprite(0)
end sub


sub RSDKLoad
	LoadSpriteSheet("Special/ScoreScreen.gif")
	SpriteFrame(0, 0, 184, 14, 1, 1)
	
	// Although used, it's not to be set from editor
	SetVariableAlias(ALIAS_VAR_PROPVAL, "unused")
end sub
