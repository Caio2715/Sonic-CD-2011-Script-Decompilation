//----------------Sonic CD Player Object Script---------------//
//--------Scripted by Christian Whitehead 'The Taxman'--------//
//-------Unpacked By Rubberduckycooly's Script Unpacker-------//

// Aliases
#alias Player.Value0	:	Player.Rings
#alias Player.Value1	:	Player.AbilityTimer
#alias Player.Value2	:	Player.CustomAnimSpeed
#alias Player.Value3	:	Player.SpeedShoes
#alias Player.Value4	:	Player.Invincible
#alias Player.Value5	:	Player.BlinkTimer
#alias Player.Value6	:	Player.MinRollSpeed
#alias Player.Value7	:	Player.AnimationCheck
#alias Player.Value8	:	Player.ScrollDelay
#alias Player.Value9	:	Player.CameraOffset
#alias Player.Value10	:	Player.FlightFunction
#alias Player.Value11	:	Player.PeeloutFunction
#alias Player.Value12	:	Player.SpindashFunction
#alias Player.Value13	:	Player.Unused1			// Completely unused
#alias Player.Value14	:	Player.DropDashCharge	// Origins new value, previously Unused2
#alias Player.Value15	:	Player.FlightGravity

// Player List Pos Aliases
#alias 0	:	PLAYER_SONIC
#alias 1	:	PLAYER_TAILS

// Flailing states, v4 names explains this much better
#alias Player.Flailing[0]	:	Player.FloorSensorL
#alias Player.Flailing[1]	:	Player.FloorSensorC
#alias Player.Flailing[2]	:	Player.FloorSensorR

// LoseRing Aliases
#alias Object.Value0		:	Object.XVelocity
#alias Object.Value1		:	Object.YVelocity

// Warp Star Aliases
#alias Object[3].Value0		:	WarpStar.Timer
#alias Object[3].DrawOrder	:	WarpStar.DrawOrder

// Object Score Alias
#alias Object[26].Value0	:	ObjectScore.Timer

// Pause Menu Aliases
#alias Object[9].DrawOrder	:	PauseMenu.DrawOrder
#alias Object[9].Priority	:	PauseMenu.Priority

// Debug Mode Alias
#alias Object[25].Value7	:	DebugMode.APress

// Death Event Aliases
#alias Object.Value1	:	DeathEvent.Text1XPos	// Game or Time
#alias Object.Value2	:	DeathEvent.Text2XPos	// Over
#alias Object.Value3	:	DeathEvent.Timer		// Also used for fading
#alias Object.DrawOrder	:	DeathEvent.DrawOrder
#alias Object.State		:	DeathEvent.State

// Death Event States
#alias 0 	: DEATHEVENT_CLASSIC_TIMEOVER
#alias 1 	: DEATHEVENT_GAMEOVER
#alias 2 	: DEATHEVENT_FADEOUT
#alias 3 	: DEATHEVENT_TIMEATTACK

// Priorities
#alias 1	:	PRIORITY_ACTIVE
#alias 2	:	PRIORITY_ACTIVE_PAUSED

// Gravity
#alias 0	:	GRAVITY_GROUND
#alias 1	:	GRAVITY_AIR

// Ink
#alias 2	:	INK_ALPHA

// Callbacks & Messages
#alias 2	:	MESSAGE_LOSTFOCUS

// Cameras
#alias 0	:	FOLLOW_PLAYER
#alias 1	:	CAMERA_LOCK_CD_VIEW
#alias 2	:	CAMERA_OFFSET_RIGHT
#alias 3	:	CAMERA_OFFSET_LEFT
#alias 4	:	CAMERA_HLOCK

// Cameras
#alias 1	:	DAMAGE_SHIELDED
#alias 2	:	DAMAGE_HURT
#alias 3	:	DAMAGE_DEATH

// Collision Modes
#alias 0	:	CMODE_FLOOR
#alias 1	:	CMODE_LWALL
#alias 2	:	CMODE_ROOF
#alias 3	:	CMODE_RWALL

// Collision Planes
#alias 0	:	COLLISION_PLANE_A

// Collision Sides
#alias 0	:	CSIDE_FLOOR
#alias 1	:	CSIDE_LWALL
#alias 2	:	CSIDE_RWALL
#alias 3	:	CSIDE_ROOF

// Control Modes
#alias -1	:	CONTROL_DISABLED
#alias  0	:	CONTROL_ENABLED

// GameModes
#alias 0	:	GAMEMODE_MAINGAME
#alias 2	:	GAMEMODE_TIMEATTACK

// Warp Destination
#alias 0	:	WARPDEST_NONE

// Function declarations
#function PlayerObject_BadnikBreak
#function PlayerObject_Hit
#function PlayerObject_Kill
#function PlayerObject_ProcessPlayer
#function PlayerObject_Blank
#function PlayerObject_RollAnimSpeed
#function PlayerObject_WalkAnimSpeed
#function PlayerObject_RunAnimSpeed
#function PlayerObject_HandleGround
#function PlayerObject_HandleRollDecel
#function PlayerObject_HandleRolling
#function PlayerObject_HandleAir
#function PlayerObject_HandleAirSpeed
#function PlayerObject_HandleAirMovement
#function PlayerObject_AirControlLock
#function PlayerObject_ResetOnFloor
#function PlayerObject_DebugMode

// Player basic movements
#function PlayerObject_HandleMovement
#function PlayerObject_StartJump
#function PlayerObject_StartSpindashS2
#function PlayerObject_StartSpindashCD
#function PlayerObject_StartPeeloutS2
#function PlayerObject_StartPeeloutCD
#function PlayerObject_StartTailsFlight
#function PlayerObject_LookingUp
#function PlayerObject_Crouching
#function PlayerObject_HandleSpindashS2	
#function PlayerObject_HandleSpindashCD
#function PlayerObject_HandlePeeloutS2
#function PlayerObject_HandlePeeloutCD
#function PlayerObject_HandleTailsFlight

// Damage and death
#function PlayerObject_Hurt
#function PlayerObject_Knockback
#function PlayerObject_OuttaHere
#function PlayerObject_Death
#function PlayerObject_Drown

// Level Gimmicks
#function PlayerObject_HangingBar
#function PlayerObject_CorkscrewRun
#function PlayerObject_CorkscrewRoll
#function PlayerObject_Tunnel
#function PlayerObject_StartTTCtrlLock
#function PlayerObject_SpinningTop
#function PlayerObject_Hugged
#function PlayerObject_Handle3DRampAnims
#function PlayerObject_SizeChange

// Origins Functions
#function PlayerObject_ResetDropDash
#function PlayerObject_HandleDropDash

// Used by badniks, if the conditions are met, they get destroyed, otherwise you get hurt
function PlayerObject_BadnikBreak
	CheckEqual(Player.Animation, ANI_JUMPING)
	TempValue0 = CheckResult
	CheckEqual(Player.Animation, ANI_SPINDASH)
	TempValue0 |= CheckResult

	ArrayPos0 = Player.EntityNo
	ArrayPos0 += 2
	CheckEqual(Object[ArrayPos0].Type, TypeName[Invincibility])
	TempValue0 |= CheckResult

	// you're invincible to badniks during the warping run
	if Warp.Timer > 0
		TempValue0 |= true
	end if

	if Player.Animation == ANI_FLYING
		CheckGreater(Player.YPos, Object.YPos)
		TempValue0 |= CheckResult
	end if

	if TempValue0 == true
		ResetObjectEntity(Object.EntityNo, Flower_TypeNo, 0, Object.XPos, Object.YPos)
		Object.DrawOrder = 4

		CreateTempObject(TypeName[SmokePuff], 0, Object.XPos, Object.YPos)
		Object[TempObjectPos].DrawOrder = 4

		CreateTempObject(TypeName[ObjectScore], ObjectScore.Timer, Object.XPos, Object.YPos)
		Object[TempObjectPos].DrawOrder = 4
		PlaySfx(8, 0)

		if Player.YVelocity > 0
			FlipSign(Player.YVelocity)
		else
			Player.YVelocity += 0xC000
		end if

		switch ObjectScore.Timer
		case 0
			Player.Score += 100
			break
		case 1
			Player.Score += 200
			break
		case 2
			Player.Score += 500
			break
		case 3
			Player.Score += 1000
			break
		end switch
				
#platform: Use_Haptics
		HapticEffect(10, 0, 0, 0)
#endplatform

#platform: Use_Origins
		TempValue0 = 0
		game.callbackParam0 = 0
		CheckEqual(Player.State, 14)
		TempValue0  = CheckResult
		CheckEqual(Player.State, 15)
		TempValue0 |= CheckResult
		if TempValue0 == true
			if Stage.PlayerListPos == 0
				game.callbackParam0 = KILL_ENEMY_ATTR_SPINDASH
				StageStatsUsabilityParam2 += 1
			endif
		endif
		StageStatsUsabilityParam1 += 1
		EngineCallback(NOTIFY_KILL_ENEMY)
		if game.playMode == BOOT_PLAYMODE_MISSION
			if game.missionFunctionNo == 8
				game.forceKillPlayer = 1
			endif
		endif
#endplatform
	else
		if Player.Invincible == 0
			Player.State = PlayerObject_Hurt
#platform: Use_Origins
			if game.playMode == BOOT_PLAYMODE_MISSION
				if game.missionFunctionNo == 8
					game.forceKillPlayer = true
				endif
			endif
#endplatform
			if Player.XPos > Object.XPos
				Player.Speed = 0x20000
			else
				Player.Speed = -0x20000
			end if
		end if
	end if
end function

// Do you really need an explanation?
function PlayerObject_Hit
	ArrayPos0 = Player.EntityNo
	ArrayPos0 += 2
	if Object[ArrayPos0].Type != TypeName[Invincibility]
		if Player.Invincible == 0
			Player.State = PlayerObject_Hurt
			if Player.XPos > Object.XPos
				Player.Speed = 0x20000
			else
				Player.Speed = -0x20000
			end if
		end if
	end if
end function

// YOU DIED
function PlayerObject_Kill
	PlaySfx(5, 0)
	Player.DrawOrder = 5
	Player.Speed = 0
	Player.XVelocity = 0
	Player.YVelocity = -0x68000
	Player.State = PlayerObject_Death
	Player.Animation = ANI_DYING
	Player.TileCollisions = false
	Player.ObjectInteraction = false
	Screen.CameraEnabled = false
				
#platform: Use_Haptics
	HapticEffect(28, 0, 0, 0)
#endplatform
end function

function PlayerObject_ProcessPlayer
#platform: Standard
	if Options.AttractMode == false
		if Player.ControlMode == CONTROL_ENABLED
			if Object[9].Type == TypeName[Blank Object]
				if KeyPress[1].Start == true
					KeyPress[1].Start = false
					if Options.DevMenuFlag == true
						Stage.State = STAGE_PAUSED
						PauseMusic()
						PlaySfx(27, false)	//Select SFX
						StopSfx(24)
						StopSfx(25)
						Object[9].Type = TypeName[PauseMenu]
						PauseMenu.DrawOrder = 7
						PauseMenu.Priority = PRIORITY_ACTIVE_PAUSED
					else
						EngineCallback(13)
					end if
				end if
			end if
		end if
		ProcessPlayerControl()
	end if
#endplatform

#platform: Mobile
	if Options.AttractMode == false
		if Options.TouchControls == true
			if Player.ControlMode == CONTROL_ENABLED
				CheckTouchRect(0, 96, Screen.CenterX, Screen.YSize)
				if CheckResult > -1
					ArrayPos0 = CheckResult
					// D-Pad XPos
					TempValue0 = TouchScreen[ArrayPos0].XPos
					TempValue0 -= Options.DPadX
					// D-Pad YPos
					TempValue1 = TouchScreen[ArrayPos0].YPos
					TempValue1 -= 192

					// tldr; check what did you touch in the d-pad
					ATan2(TempValue2, TempValue0, TempValue1)
					TempValue2 += 32
					TempValue2 &= 255
					TempValue2 >>= 6
					switch TempValue2
					case 0
						KeyDown.Right = true
						break
					case 1
						KeyDown.Down = true
						break
					case 2
						KeyDown.Left = true
						break
					case 3
						KeyDown.Up = true
						break
					end switch
				end if

				CheckTouchRect(Screen.CenterX, 96, Screen.XSize, 240)
				if CheckResult > -1
					KeyDown.ButtonA = true
				end if

				if DebugMode.APress == false
					KeyPress.ButtonA |= KeyDown.ButtonA
				end if

				DebugMode.APress = KeyDown.ButtonA
				if Object[9].Type == TypeName[Blank Object]

					CheckTouchRect(240, 0, Screen.XSize, 40)
					if CheckResult > -1
						Stage.State = STAGE_PAUSED
						PauseMusic()
						PlaySfx(27, 0)	//Select SFX
						StopSfx(24)
						StopSfx(25)
						Object[9].Type = TypeName[PauseMenu]
						PauseMenu.DrawOrder = 7
						PauseMenu.Priority = PRIORITY_ACTIVE_PAUSED
						if Engine.FrameSkipTimer > -1
							Engine.FrameSkipTimer = -1
						end if

					end if

					if Engine.Message == MESSAGE_LOSTFOCUS
						Stage.State = STAGE_PAUSED
						PauseMusic()
						PlaySfx(27, 0)	//Select SFX
						StopSfx(24)
						StopSfx(25)
						Object[9].Type = TypeName[PauseMenu]
						PauseMenu.DrawOrder = 7
						PauseMenu.Priority= PRIORITY_ACTIVE_PAUSED
						if Engine.FrameSkipTimer > -1
							Engine.FrameSkipTimer = -1
						end if

					end if

				end if

			end if
		else
			if Player.ControlMode == CONTROL_ENABLED
				if Object[9].Type == TypeName[Blank Object]
					if KeyPress[1].Start == true

						KeyPress[1].Start = false
						Stage.State = STAGE_PAUSED
						PauseMusic()
						PlaySfx(27, 0)	//Select SFX
						StopSfx(24)
						StopSfx(25)
						Object[9].Type = TypeName[PauseMenu]
						PauseMenu.DrawOrder = 7
						PauseMenu.Priority = PRIORITY_ACTIVE_PAUSED
						if Engine.FrameSkipTimer > -1
							Engine.FrameSkipTimer = -1
						end if

					end if

					if Engine.Message == MESSAGE_LOSTFOCUS

						Stage.State = STAGE_PAUSED
						PauseMusic()
						PlaySfx(27, 0)	//Select SFX
						StopSfx(24)
						StopSfx(25)
						Object[9].Type = TypeName[PauseMenu]
						PauseMenu.DrawOrder = 7
						PauseMenu.Priority = PRIORITY_ACTIVE_PAUSED
						if Engine.FrameSkipTimer > -1
							Engine.FrameSkipTimer = -1
						end if

					end if

				end if
				
			end if

		end if
		
		ProcessPlayerControl()
	end if
#endplatform

	// Speed Shoes control
	if Player.SpeedShoes > 0
		Player.SpeedShoes--
		if Player.SpeedShoes == 0
			Player.Acceleration		= 0xC00
			Player.AirAcceleration	= 0x1800
			Player.TopSpeed 		= 0x60000
			if Music.CurrentTrack == 3		// Speed Shoes
				PlayMusic(0)
			end if
		end if
	end if
	
	// Invincibility Control
	if Player.Invincible > 0
		if Player.State != PlayerObject_Knockback
			if Player.Invincible > 2000
				Player.Invincible = 120
				Player.BlinkTimer = 3
			end if
		end if
		
		if Player.BlinkTimer > 0
			Player.BlinkTimer++
			if Player.BlinkTimer > 8
				Player.BlinkTimer = 1
			end if
			if Player.BlinkTimer > 4
				Player.Visible = false
			else
				Player.Visible = true
			end if
		end if
		
		Player.Invincible--
		if Player.Invincible == 0
			Player.BlinkTimer = 0
			Player.Visible = true
			if Music.CurrentTrack == 2		// Invincibility
				PlayMusic(0)
			end if
			if Object[+2].Type == TypeName[Invincibility]
				switch Object[+2].PropertyValue
				case 0
					TempValue0 = Player.EntityNo
					TempValue0 += 2
					ResetObjectEntity(TempValue0, TypeName[Blank Object], 0, 0, 0)
					break

				case 1
					TempValue0 = Player.EntityNo
					TempValue0 += 2
					ResetObjectEntity(TempValue0, TypeName[Blank Object], 0, 0, 0)
					Object[+2].Type = TypeName[BlueShield]
					Object[+2].PropertyValue = 1
					Object[+2].Priority = 1
					Object[+2].DrawOrder = 4
					Object[+2].InkEffect = INK_ALPHA
					Object[+2].Alpha = 160
					Object[+2].XPos = Player.XPos
					Object[+2].YPos = Player.YPos
					break

				end switch
			end if

		end if

	end if

	// Restore camera position after looking up / crounching
	if Player.State != PlayerObject_LookingUp
		if Player.State != PlayerObject_Crouching
			if Player.LookPos > 0
				Player.LookPos -= 2
			end if

			if Player.LookPos < 0
				Player.LookPos += 2
			end if
		end if
	end if

	if Warp.Timer > 0
		Warp.Timer++
		
		if Warp.Timer == 204
			Screen.CameraEnabled = false
			CreateTempObject(TypeName[TimeWarp], 0, 0, 0)
			Object[TempObjectPos].DrawOrder = 6
		end if
	end if
	
	// Keeps the camera in place for a bit after releasing S2 Spin Dash
	if Player.ScrollDelay > 0
		Player.ScrollDelay--
		if Player.ScrollDelay == 0
			Screen.CameraStyle = FOLLOW_PLAYER
		end if
	end if

	// Resets FlightGravity
	if Player.State != PlayerObject_HandleTailsFlight
		if Player.FlightGravity != 0
			StopSfx(24)
			StopSfx(25)
			Player.FlightGravity = 0
		end if
	end if

end function

// Dummy!
function PlayerObject_Blank
	CheckResult = false
end function


// Updates animation speed while rolling
function PlayerObject_RollAnimSpeed
	if Stage.PlayerListPos == PLAYER_TAILS
		Player.CustomAnimSpeed = 120
	else
		Player.CustomAnimSpeed = Player.Speed
		if Player.CustomAnimSpeed < 0
			FlipSign(Player.CustomAnimSpeed)
		end if
		Player.CustomAnimSpeed *= 240
		Player.CustomAnimSpeed /= 0x60000
		Player.CustomAnimSpeed += 48
	end if
end function


// Animation speed while walking
function PlayerObject_WalkAnimSpeed
	Player.AnimationSpeed = Player.Speed
	if Player.AnimationSpeed < 0
		FlipSign(Player.AnimationSpeed)
	end if
	Player.AnimationSpeed *= 60
	Player.AnimationSpeed /= 0x60000
	Player.AnimationSpeed += 20
end function

// Animation speed while running
function PlayerObject_RunAnimSpeed
	Player.AnimationSpeed = Player.Speed
	if Player.AnimationSpeed < 0
		FlipSign(Player.AnimationSpeed)
	end if
	Player.AnimationSpeed *= 80
	Player.AnimationSpeed /= 0x60000
end function

function PlayerObject_HandleGround
	if Player.Animation != ANI_SKIDDING	// This handles that the skid only plays sfx once
		TempValue7 = true
	else
		TempValue7 = false
	end if

	CallFunction(PlayerObject_HandleMovement)

	if Player.Gravity == true
		
#platform: Use_Origins
		Player.State = PlayerObject_ResetDropDash
#endplatform

#platform: Use_Standalone
		Player.State = PlayerObject_HandleAir
#endplatform
		CallFunction(PlayerObject_HandleAirMovement)
	else
		CallFunction(PlayerObject_ResetOnFloor)
		if Player.Speed == 0
			// Consumes the warp if you stop too late during warping run
			if Warp.Destination > 0
				if Warp.Timer > 99
					if Warp.Timer < 204
						Warp.Destination = WARPDEST_NONE
					end if

				end if

				Warp.Timer = 0
			end if
			
			if Player.CollisionMode == CMODE_FLOOR
				if Player.Timer < 240
					Player.Animation = ANI_STOPPED
					Player.Timer++
				else	// Waiting animation
					Player.Animation = ANI_WAITING
					if Stage.PlayerListPos == PLAYER_SONIC
						Player.Timer++
#platform: Use_Origins
						if game.playMode == BOOT_PLAYMODE_CLASSIC
							if Player.Timer == 10620
								Player.Timer = 0
								PlaySfx(26, 0)
								Player.State = PlayerObject_OuttaHere
								Player.Animation = ANI_BORED
							endif
						endif
#endplatform

#platform: Use_Standalone
						if Player.Timer == 10620	// I'm Outta Here!
							Player.Timer = 0
							PlaySfx(26, 0)
							Player.State = PlayerObject_OuttaHere
							Player.Animation = ANI_BORED
						end if
#endplatform
					end if

				end if

				if Player.FloorSensorC == false
					if Player.FloorSensorR == false
						Player.Timer = 0
						if Player.Direction == FACING_LEFT
							Player.Animation = ANI_FLAILINGLEFT
						else
							Player.Animation = ANI_FLAILINGRIGHT
						end if
					end if

					if Player.FloorSensorL == false
						Player.Timer = 0
						if Player.Direction == FACING_RIGHT
							Player.Animation = ANI_FLAILINGLEFT
						else
							Player.Animation = ANI_FLAILINGRIGHT
						end if
					end if

				end if

			end if
		else
			Player.Timer = 0
			if Player.Speed > 0
				if Player.Speed < 390594	// 0x5F5C2
					Player.Animation = ANI_WALKING
					CallFunction(PlayerObject_WalkAnimSpeed)
					// Consumes the warp if you stop too late during warping run, plus deletes the warp star
					if Warp.Destination > WARPDEST_NONE
						if Warp.Timer > 99
							if Warp.Timer < 204
								Warp.Destination = WARPDEST_NONE
							end if
						end if
						Warp.Timer = 0
						Object[3].Type = TypeName[Blank Object]
					end if
				else
					// Spawns the Warp Stars
					if Warp.Destination > WARPDEST_NONE
						if Warp.Timer == 0
							Warp.Timer = 1
							ResetObjectEntity(3, TypeName[WarpStar], 0, Player.XPos, Player.YPos)
							WarpStar.Timer = 7
							WarpStar.DrawOrder = 4
						end if
					end if

					if Player.Speed > 655359	// 0x9FFFF
						Player.Animation = ANI_PEELOUT
					else
						Player.Animation = ANI_RUNNING
					end if
					CallFunction(PlayerObject_RunAnimSpeed)
				end if
			else
				if Player.Speed > -390594	// -0x5F5C2
					Player.Animation = ANI_WALKING
					CallFunction(PlayerObject_WalkAnimSpeed)
					// Consumes the warp if you stop too late during warping run, plus deletes the warp star
					if Warp.Destination > WARPDEST_NONE
						if Warp.Timer > 99
							if Warp.Timer < 204
								Warp.Destination = WARPDEST_NONE
							end if
						end if
						Warp.Timer = 0
						Object[3].Type = TypeName[Blank Object]
					end if
				else
					// Spawns the Warp Stars
					if Warp.Destination > WARPDEST_NONE
						if Warp.Timer == 0
							Warp.Timer = 1
							ResetObjectEntity(3, TypeName[WarpStar], 0, Player.XPos, Player.YPos)
							WarpStar.Timer = 7
							WarpStar.DrawOrder = 4
						end if
					end if

					if Player.Speed < -655359	// -0x9FFFF
						Player.Animation = ANI_PEELOUT
					else
						Player.Animation = ANI_RUNNING
					end if
					CallFunction(PlayerObject_RunAnimSpeed)
				end if

			end if

		end if

		// Skidding
		if Player.Skidding > 0
			if TempValue7 == true
				PlaySfx(3, 0)
			end if
			Player.Animation = ANI_SKIDDING
			Player.AnimationSpeed = 0
			Player.Skidding--
			if Ring.AniCount == 0
				CreateTempObject(TypeName[DustPuff], 0, Player.XPos, Player.YPos)
				Object[TempObjectPos].iYPos += Player.CollisionBottom
				Object[TempObjectPos].DrawOrder = Player.DrawOrder
			end if

			if Player.Speed > 0
				Player.Direction = FACING_RIGHT
			else
				Player.Direction = FACING_LEFT
			end if
		end if

		// Push, there's a small delay so 2 is our "true"
		if Player.CollisionMode == CMODE_FLOOR
			if Player.Pushing == 2
				Player.Animation = ANI_PUSHING
				Player.AnimationSpeed = 0
			end if
		end if

		// Jump
		if Player.JumpPress == true
			CallFunction(PlayerObject_StartJump)
		else
			// Look Up
			if Player.Up == true
				if Player.Speed == 0
					if Player.Animation != ANI_FLAILINGLEFT
						if Player.Animation != ANI_FLAILINGRIGHT
							Player.State = PlayerObject_LookingUp
							Player.Animation = ANI_LOOKINGUP
							Player.Timer = 0
						end if
					end if
				end if
			end if

			// Crouch
			if Player.Down == true
				if Player.Speed == 0
					if Player.Animation != ANI_FLAILINGLEFT
						if Player.Animation != ANI_FLAILINGRIGHT
							Player.State = PlayerObject_Crouching
							Player.Animation = ANI_LOOKINGDOWN
							Player.Timer = 0
						end if
					end if
				else
					// Roll
					if Player.Left == false
						if Player.Right == false
							if Player.Speed > 0
								if Player.Speed > 34816		// 0x8800
									Player.State = PlayerObject_HandleRolling
									Player.Animation = ANI_JUMPING
									Player.iYPos -= Player.CameraOffset
									Player.AbilityTimer = 1024
								end if
							else
								if Player.Speed < -34816	// -0x8800
									Player.State = PlayerObject_HandleRolling
									Player.Animation = ANI_JUMPING
									Player.iYPos -= Player.CameraOffset
									Player.AbilityTimer = 1024
								end if
							end if
						end if
					end if
				end if
			end if
		end if
	end if
end function

function PlayerObject_HandleRolling
	CallFunction(PlayerObject_HandleRollDecel)
	if Player.Gravity == true
		
#platform: Use_Origins
		Player.State = PlayerObject_ResetDropDash
#endplatform

#platform: Use_Standalone
		Player.State = PlayerObject_HandleAir
#endplatform
		Player.Timer = 0
		CallFunction(PlayerObject_HandleAirMovement)
	else
		CallFunction(PlayerObject_RollAnimSpeed)
		Player.AnimationSpeed = Player.CustomAnimSpeed

		TempValue0 = Player.Speed
		if TempValue0 < 0
			FlipSign(TempValue0)
		end if
			// Warp-Consuming
		if TempValue0 < 0x5F5C2
			if Warp.Destination > WARPDEST_NONE
				if Warp.Timer > 99
					if Warp.Timer < 204
						Warp.Destination = WARPDEST_NONE
					end if
				end if
				Warp.Timer = 0
			end if
		else
			// Spawn Warp Stars
			if Warp.Destination > WARPDEST_NONE
				if Warp.Timer == 0
					Warp.Timer = 1
					ResetObjectEntity(3, TypeName[WarpStar], 0, Player.XPos, Player.YPos)
					WarpStar.Timer = 7
					WarpStar.DrawOrder = 4
				end if
			end if
		end if
		CallFunction(PlayerObject_ResetOnFloor)
		if Player.JumpPress == true
			CallFunction(PlayerObject_StartJump)
		end if
	end if
end function

// Handles desaceleration while rolling
function PlayerObject_HandleRollDecel

	if Player.Right == true
		if Player.Speed < 0
			Player.Speed += Player.RollingDeceleration
		end if
	end if

	if Player.Left == true
		if Player.Speed > 0
			Player.Speed -= Player.RollingDeceleration
		end if
	end if

	if Player.Speed > 0
		Player.Speed -= Player.AirDeceleration
		if Player.Speed < 0
			Player.Speed = 0
		end if
		
		if Player.Speed == 0
			if Player.Angle > 224
				Player.State = PlayerObject_HandleGround
			end if
			if Player.Angle < 32
				Player.State = PlayerObject_HandleGround
			end if
		end if

		Sin256(TempValue0, Player.Angle)
		if TempValue0 > 0
			Sin256(TempValue0, Player.Angle)
			TempValue0 *= 0x5000
		else
			Sin256(TempValue0, Player.Angle)
			TempValue0 *= 0x1E00
		end if
		
		TempValue0 >>= 8
		Player.Speed += TempValue0
	else
		Player.Speed += Player.AirDeceleration
		if Player.Speed > 0
			Player.Speed = 0
		end if

		if Player.Speed == 0
			if Player.Angle > 224
				Player.State = PlayerObject_HandleGround
			end if
			if Player.Angle < 32
				Player.State = PlayerObject_HandleGround
			end if
		end if

		Sin256(TempValue0, Player.Angle)
		if TempValue0 < 0
			Sin256(TempValue0, Player.Angle)
			TempValue0 *= 0x5000
		else
			Sin256(TempValue0, Player.Angle)
			TempValue0 *= 0x1E00
		end if

		TempValue0 >>= 8
		Player.Speed += TempValue0
	end if
	if Player.Speed > 0x180000
		Player.Speed = 0x180000
	end if
	if Player.Speed < -0x180000
		Player.Speed = -0x180000
	end if
end function

function PlayerObject_ResetDropDash	// Origins function, prevents Sonic from drop dashing without jumping
#platform: Use_Origins
	Player.DropDashCharge = -1
	Player.State = PlayerObject_HandleAir
	CallFunction(PlayerObject_HandleAir)
#endplatform
endfunction

function PlayerObject_HandleAir
	CallFunction(PlayerObject_HandleAirSpeed)
#platform: Use_Origins
	CallFunction(PlayerObject_HandleDropDash)
#endplatform
	if Player.Gravity == GRAVITY_AIR	// Check that you're truly in the air

		CallFunction(PlayerObject_HandleAirMovement)
		// More warp stuff
		if Warp.Destination > WARPDEST_NONE
			TempValue0 = Player.YVelocity
			if TempValue0 < 0
				FlipSign(TempValue0)
			end if
			if TempValue0 < 0x60000	
				TempValue0 = Player.XVelocity
				if TempValue0 < 0
					FlipSign(TempValue0)
				end if
				if TempValue0 < 0x60000
					TempValue0 = Player.XVelocity
					TempValue0 -= Warp.SpeedCompare
					if TempValue0 < 0
						FlipSign(TempValue0)
					end if
					
					if TempValue0 > 0x40000
						if Warp.Timer > 99
							if Warp.Timer < 204
								Warp.Destination = WARPDEST_NONE
							end if
						end if
						Warp.Timer = 0
					end if
				end if
			end if
			Warp.SpeedCompare = Player.XVelocity
		end if

		// changes the flailing with the walking, not sure when this is used
		if Player.YVelocity > 0x20000
			if Player.Animation == ANI_FLAILINGLEFT
				Player.Animation = ANI_WALKING
			end if
			if Player.Animation == ANI_FLAILINGRIGHT
				Player.Animation = ANI_WALKING
			end if
		end if

		// Post-Hitting a spring
		if Player.Animation == ANI_BOUNCING
			if Player.YVelocity >= 0
				if Player.AnimationCheck == ANI_STOPPED
					Player.AnimationCheck = ANI_WALKING
				end if
				Player.Animation = Player.AnimationCheck
			end if
		end if

		// Post Getting hurt
		if Player.Animation == ANI_HURT
			if Player.YVelocity >= 0
				if Player.AnimationCheck == ANI_STOPPED
					Player.AnimationCheck = ANI_WALKING
				end if
				Player.Animation = Player.AnimationCheck
			end if
		end if
		// Calls the player flight function
		if Player.Animation == ANI_JUMPING
			CallFunction(Player.FlightFunction)
		end if
	else	// go back to the ground silly

#platform: Use_Origins
		if Player.DropDashCharge >= 20
			CallFunction(PlayerObject_StartSpindashS2)
		else
			Player.State = PlayerObject_HandleGround
			CallFunction(PlayerObject_ResetOnFloor)
			Player.Skidding = 0
		endif
#endplatform

#platform: Use_Standalone
		Player.State = PlayerObject_HandleGround
		CallFunction(PlayerObject_ResetOnFloor)
		Player.Skidding = 0
#endplatform
	end if
end function

// Handle movement in the air
function PlayerObject_HandleAirSpeed
	if Player.YVelocity > -0x40000
		if Player.YVelocity < 0
			TempValue0 = Player.Speed
			TempValue0 >>= 5
			Player.Speed -= TempValue0
		end if
	end if
	TempValue0 = Player.TopSpeed
	FlipSign(TempValue0)

	if Player.Speed > TempValue0
		if Player.Left == true
			Player.Speed -= Player.AirAcceleration
			Player.Direction = FACING_LEFT
		end if
	else
		if Player.Left == true
			Player.Direction = FACING_LEFT
		end if
	end if

	if Player.Speed < Player.TopSpeed
		if Player.Right == true
			Player.Speed += Player.AirAcceleration
			Player.Direction = FACING_RIGHT
		end if
	else
		if Player.Right == true
			Player.Direction = FACING_RIGHT
		end if
	end if

	if Options.OriginalControls == true
		if Player.Left == true
			TempValue0 = Player.TopSpeed
			FlipSign(TempValue0)
			if Player.Speed < TempValue0
				Player.Speed = TempValue0
			end if
		end if

		if Player.Right == true
			if Player.Speed > Player.TopSpeed
				Player.Speed = Player.TopSpeed
			end if
		end if
	end if
end function

// Movement when you fall from a cliff
function PlayerObject_HandleAirMovement
	Player.TrackScroll = true

	Player.YVelocity += Player.GravityStrength
	if Player.YVelocity < Player.JumpCap
		if Player.JumpHold == 0
			if Player.Timer > 0
				Player.YVelocity = Player.JumpCap
				TempValue0 = Player.Speed
				TempValue0 >>= 5
				Player.Speed -= TempValue0
			end if
		end if
	end if
	Player.XVelocity = Player.Speed

	if Player.Rotation < 256
		if Player.Rotation > 0
			Player.Rotation -= 4
		else
			Player.Rotation = 0
		end if
	else
		if Player.Rotation < 512
			Player.Rotation += 4
		else
			Player.Rotation = 0
		end if
	end if

	Player.CollisionMode = CMODE_FLOOR
	if Player.Animation == ANI_JUMPING
		Player.AnimationSpeed = Player.CustomAnimSpeed
	end if
end function

// Cancels input movement
function PlayerObject_AirControlLock
	Player.Left = false
	Player.Right = false
	CallFunction(PlayerObject_HandleAirSpeed)
#platform: Use_Origins
	CallFunction(PlayerObject_HandleDropDash)
#endplatform

	if Player.Gravity == GRAVITY_AIR
		CallFunction(PlayerObject_HandleAirMovement)
	else
#platform: Use_Origins
		if Player.DropDashCharge >= 20
			CallFunction(PlayerObject_StartSpindashS2)
		else
			Player.State = PlayerObject_HandleGround
			CallFunction(PlayerObject_ResetOnFloor)
			Player.Skidding = 0
		endif
#endplatform

#platform: Use_Standalone
		Player.State = PlayerObject_HandleGround
		CallFunction(PlayerObject_ResetOnFloor)
		Player.Skidding = false
#endplatform
	end if
end function


// Gets X and Y Velocity based on angles
function PlayerObject_ResetOnFloor
	Player.TrackScroll = false

	Cos256(TempValue0, Player.Angle)
	TempValue0 *= Player.Speed
	TempValue0 >>= 8
	Player.XVelocity = TempValue0

	Sin256(TempValue0, Player.Angle)
	TempValue0 *= Player.Speed
	TempValue0 >>= 8
	Player.YVelocity = TempValue0

end function

// Debug movement
// This is also used on Tidal Tempest to move the player inside water streams
function PlayerObject_DebugMode
	Player.Gravity = GRAVITY_AIR
	if Player.Up == true
		Player.YPos -= 0x20000
	end if
	if Player.Down == true
		Player.YPos += 0x20000
	end if
	if Player.Left == true
		Player.XPos -= 0x20000
	end if
	if Player.Right == true
		Player.XPos += 0x20000
	end if
end function

// This makes you move
function PlayerObject_HandleMovement
	if Player.ControlLock > 0
		Player.ControlLock--
		Sin256(TempValue0, Player.Angle)
		TempValue0 *= 0x2000
		TempValue0 >>= 8
		Player.Speed += TempValue0
	else
		if Player.Left == true
			TempValue0 = Player.TopSpeed
			FlipSign(TempValue0)
			if Player.Speed > TempValue0
				if Player.Speed > 0
					if Player.CollisionMode == CMODE_FLOOR
						// Skid
						if Player.Speed > 0x40000
							Player.Skidding = 16
						end if
					end if
					if Player.Speed < 0x8000
						Player.Speed = -0x8000
						Player.Skidding = 0
					else
						Player.Speed -= 0x8000
					end if
				else
					Player.Speed -= Player.Acceleration
					Player.Skidding = 0
				end if
			end if
			if Player.Speed <= 0
				Player.Direction = FACING_LEFT
			end if
		end if

		if Player.Right == true
			if Player.Speed < Player.TopSpeed
				if Player.Speed < 0
					if Player.CollisionMode == CMODE_FLOOR
						// Skid
						if Player.Speed < -0x40000
							Player.Skidding = 16
						end if
					end if
					if Player.Speed > -0x8000
						Player.Speed = 0x8000
						Player.Skidding = 0
					else
						Player.Speed += 0x8000
					end if
				else
					Player.Speed += Player.Acceleration
					Player.Skidding = 0
				end if
			end if
			if Player.Speed >= 0
				Player.Direction = FACING_RIGHT
			end if
		end if

		TempValue0 = Player.Left
		TempValue0 |= Player.Right
		if TempValue0 == false
			//tldr, reduce speed with desaceleration, or based on angle
			if Player.Speed > 0
				Player.Speed -= Player.Deceleration
				if Player.Speed < 0
					Player.Speed = 0
				end if
			else
				Player.Speed += Player.Deceleration
				if Player.Speed > 0
					Player.Speed = 0
				end if
			end if

			if Player.Speed > 0x2000
				Sin256(TempValue0, Player.Angle)
				TempValue0 *= 0x2000
				TempValue0 >>= 8
				Player.Speed += TempValue0
			end if

			if Player.Speed < -0x2000
				Sin256(TempValue0, Player.Angle)
				TempValue0 *= 0x2000
				TempValue0 >>= 8
				Player.Speed += TempValue0
			end if

			if Player.Angle > 192
				if Player.Angle < 228
					if Player.Speed > -0x10000
						if Player.Speed < 0x10000
							Player.ControlLock = 30 // Lock the player to move out of the angle
						end if
					end if
				end if
			end if

			if Player.Angle > 28
				if Player.Angle < 64
					if Player.Speed > -0x10000
						if Player.Speed < 0x10000
							Player.ControlLock = 30 // Lock the player to move out of the angle
						end if
					end if
				end if
			end if
		else
			Sin256(TempValue0, Player.Angle)
			TempValue0 *= 0x2000
			TempValue0 >>= 8
			Player.Speed += TempValue0
			if Player.Right == true
				if Player.Left == false
					if Player.Angle > 192
						if Player.Angle < 228
							if Player.Speed < 0x28000
								if Player.Speed > -0x20000
									Player.ControlLock = 30 // Lock the player to move out of the angle
								end if
							end if
						end if
					end if
				end if
			else
				if Player.Left == true
					if Player.Angle > 28
						if Player.Angle < 64
							if Player.Speed > -0x28000
								if Player.Speed < 0x20000
									Player.ControlLock = 30 // Lock the player to move out of the angle
								end if
							end if
						end if
					end if
				end if
			end if
		end if
	end if
end function

// A classic move
function PlayerObject_StartJump
	CheckResult = false
	if Player.CollisionMode == CMODE_FLOOR
		TempValue6 = Object.XPos
		TempValue7 = Object.YPos

		Object.XPos = Player.XPos
		Object.YPos = Player.YPos
		TempValue0  = Player.CollisionTop
		TempValue0 -= 2
		ObjectTileCollision(CSIDE_RWALL, 0, TempValue0, 0)

		Object.XPos = TempValue6
		Object.YPos = TempValue7
	end if

	if CheckResult == false
		Player.ControlLock = false
		Player.Gravity = GRAVITY_AIR
		Player.AbilityTimer = 8

		Sin256(Player.XVelocity, Player.Angle)
		Player.XVelocity *= Player.JumpStrength
		Cos256(TempValue0, Player.Angle)
		TempValue0 *= Player.Speed
		Player.XVelocity += TempValue0
		Player.XVelocity >>= 8

		Sin256(Player.YVelocity, Player.Angle)
		Player.YVelocity *= Player.Speed
		Cos256(TempValue0, Player.Angle)
		TempValue0 *= Player.JumpStrength
		Player.YVelocity -= TempValue0
		Player.YVelocity >>= 8

		Player.Speed = Player.XVelocity
		Player.TrackScroll = true
		Player.Animation = ANI_JUMPING
		Player.Angle = 0
		Player.CollisionMode = CMODE_FLOOR
		Player.Timer = 1
		CallFunction(PlayerObject_RollAnimSpeed)
		
		Player.State = PlayerObject_HandleAir
		PlaySfx(0, 0)
	end if
#platform: Use_Origins
	if game.playMode == BOOT_PLAYMODE_CLASSIC
		Player.DropDashCharge = -1
	else
		Player.DropDashCharge =  0
	endif
#endplatform
end function

// A true Classic, but the actual spindash is set here, this only starts it
function PlayerObject_StartSpindashS2
	Player.State = PlayerObject_HandleSpindashS2
	Player.Animation = ANI_SPINDASH
	Player.AbilityTimer = 0
	PlaySfx(6, 0)
	// Dust Puff Code
	CreateTempObject(TypeName[DustPuff], Object.EntityNo, Player.XPos, Player.YPos)
	Object[TempObjectPos].iYPos = Player.CollisionBottom
	Object[TempObjectPos].YPos += Player.YPos
	Object[TempObjectPos].Frame = 4
	Object[TempObjectPos].DrawOrder = 4
	Object[TempObjectPos].Direction = Player.Direction
				
#platform: Use_Haptics
	HapticEffect(112, 0, 0, 0)
#endplatform
end function

// Not so classic, but the actual spindash is set here, this only starts it
function PlayerObject_StartSpindashCD
	Player.State = PlayerObject_HandleSpindashCD
	Player.Animation = ANI_JUMPING
	Player.YPos += 0x50000
	Player.AbilityTimer = 0
	PlaySfx(6, 0)
				
#platform: Use_Haptics
	HapticEffect(112, 0, 0, 0)
#endplatform
end function

// um yesh, Sonic 2 Peel Out, this just starts it
function PlayerObject_StartPeeloutS2
	Player.State = PlayerObject_HandlePeeloutS2
	Player.AbilityTimer = 0
	PlaySfx(6, 0)
				
#platform: Use_Haptics
	HapticEffect(115, 0, 0, 0)
#endplatform
end function

// A true classic, this just starts it tho
function PlayerObject_StartPeeloutCD
	Player.State = PlayerObject_HandlePeeloutCD
	Player.AbilityTimer = 0
	PlaySfx(6, 0)
				
#platform: Use_Haptics
	HapticEffect(115, 0, 0, 0)
#endplatform
end function

// Starts flying state
function PlayerObject_StartTailsFlight
	if Player.AbilityTimer > 0
		Player.AbilityTimer--
	else
		if Player.JumpPress == true
			Player.Timer = 0
			Player.State = PlayerObject_HandleTailsFlight
			Player.FlightGravity = 0x800
#platform: Use_Origins
			game.callbackParam0=0
			game.callbackParam1=1
			game.callbackParam2=0
			EngineCallback(NOTIFY_STATS_CHARA_ACTION)
#endplatform
			// check that you're not in water
			if Player.GravityStrength == 0x3800
				PlaySfx(24, 1)
				Player.Animation = ANI_FLYING
			else
				Player.Animation = ANI_SWIMMING
			end if
		end if
	end if
end function

// Hey look up
function PlayerObject_LookingUp
	if Player.Up == false
		Player.State = PlayerObject_HandleGround
		Player.Timer = 0
	else
		if Player.Timer < 60
			Player.Timer++
		else
			if Player.LookPos > -112
				Player.LookPos -= 2
			end if
		end if
		if Player.Gravity == GRAVITY_AIR

#platform: Use_Origins
			Player.State = PlayerObject_ResetDropDash
#endplatform

#platform: Use_Standalone
			Player.State = PlayerObject_HandleAir
#endplatform
			Player.Timer = 0
		else
			if Player.JumpPress == true
				CallFunction(Player.PeeloutFunction)
			end if
		end if
	end if
end function

// Hey look down
function PlayerObject_Crouching
	if Player.Down == false
		Player.State = PlayerObject_HandleGround
		Player.Timer = 0
	else
		if Player.Timer < 60
			Player.Timer++
		else
			if Player.LookPos < 96
				Player.LookPos += 2
			end if
		end if
		if Player.Gravity == GRAVITY_AIR
			
#platform: Use_Origins
			Player.State = PlayerObject_ResetDropDash
#endplatform

#platform: Use_Standalone
			Player.State = PlayerObject_HandleAir
#endplatform
			Player.Timer = 0
		else
			if Player.JumpPress == true
				CallFunction(Player.SpindashFunction)
			end if
		end if
	end if
end function

// S2 Spin Dash code
function PlayerObject_HandleSpindashS2
	// Keep the camera lock, cancel the spin dash
	if Player.Gravity == true
#platform: Use_Origins
		Player.State = PlayerObject_ResetDropDash
#endplatform

#platform: Use_Standalone
		Player.State = PlayerObject_HandleAir
#endplatform
		Player.Speed = 0
	end if

	// Mashing
	if Player.JumpPress == true
		if Player.AbilityTimer < 512
			Player.AbilityTimer += 64
		end if
		Player.Frame = 0
		PlaySfx(6, 0)
	else
		if Player.AbilityTimer > 0
			Player.AbilityTimer--
		end if
	end if

#platform: Use_Origins
	TempValue1=Player.Down
	if Player.DropDashCharge>=20
		Player.DropDashCharge=-1
		Sin256(TempValue0, Player.Angle)
		if Player.Direction == FACING_RIGHT
			if TempValue0 >= 0
				TempValue0 <<= 2
			else
				TempValue0 <<= 1
			endif
		else
			if TempValue0 >= 0
				TempValue0 <<= 1
			else
				TempValue0 <<= 2
			endif
			FlipSign(TempValue0)
		endif
		if TempValue0 > 512
			TempValue0 = 512
		endif
		Player.AbilityTimer = TempValue0
		TempValue1 = false
	endif
	CheckEqual(TempValue1, false)
#endplatform

#platform: Use_Standalone
	CheckEqual(Player.Down, false)
#endplatform
	// Spin Dash release
	if CheckResult == true
		Player.Timer = 0
		Player.State = PlayerObject_HandleRolling
		Player.Animation = ANI_JUMPING
		Player.iYPos -= Player.CameraOffset
		Player.ScrollDelay = 15
		Screen.CameraStyle = CAMERA_HLOCK

		TempValue0 = Player.AbilityTimer
		TempValue0 <<= 9
		TempValue0 += 0x80000

		if Player.Direction == FACING_RIGHT
			Player.Speed = TempValue0
		else
			Player.Speed = TempValue0
			FlipSign(Player.Speed)
		end if

		PlaySfx(7, 0)

		CallFunction(PlayerObject_ResetOnFloor)
				
#platform: Use_Haptics
		HapticEffect(42, 0, 0, 0)
#endplatform

	end if
end function


function PlayerObject_HandleSpindashCD
	if Player.Direction == FACING_RIGHT
		Screen.CameraStyle = CAMERA_OFFSET_RIGHT
	else
		Screen.CameraStyle = CAMERA_OFFSET_LEFT
	end if
	// Keep the camera lock, cancel the spin dash
	if Player.Gravity == true
#platform: Use_Origins
		Player.State = PlayerObject_ResetDropDash
#endplatform

#platform: Use_Standalone
		Player.State = PlayerObject_HandleAir
#endplatform
		Player.Speed = 0
		Screen.CameraStyle = CAMERA_LOCK_CD_VIEW
	end if

	// Charge
	if Player.GravityStrength == 0x1000
		if Player.AbilityTimer < 0x80000
			Player.AbilityTimer += 0x6000
		end if
	else
		if Player.AbilityTimer < 0xC0000
			Player.AbilityTimer += 0x6000
		end if
	end if

	// Release
	if Player.Down == false
		Screen.CameraStyle = CAMERA_LOCK_CD_VIEW
		Player.Timer = 0
		if Player.AbilityTimer < 0x2FAE1
			Player.Speed = 0
			Player.State = PlayerObject_HandleGround
		else
			Player.State = PlayerObject_HandleRolling
			Player.Animation = ANI_JUMPING
			Player.Speed = Player.AbilityTimer
			if Player.Direction == FACING_LEFT
				FlipSign(Player.Speed)
			end if
			PlaySfx(7, 0)
		end if
		CallFunction(PlayerObject_ResetOnFloor)
				
#platform: Use_Haptics
		HapticEffect(42, 0, 0, 0)
#endplatform

	end if
end function


function PlayerObject_HandlePeeloutS2
	// Cancels the Peel Out, keeps the camera
	if Player.Gravity == true
#platform: Use_Origins
		Player.State = PlayerObject_ResetDropDash
#endplatform

#platform: Use_Standalone
		Player.State = PlayerObject_HandleAir
#endplatform
		Player.Speed = 0
	end if
	// Charge
	if Player.GravityStrength == 0x1000
		if Player.AbilityTimer < 0x60000
			Player.AbilityTimer += 0x6000
		end if
	else
		if Player.AbilityTimer < 0xC0000
			Player.AbilityTimer += 0x6000
		end if
	end if
	// Speed building, from walking to running then peelout
	if Player.AbilityTimer < 0x5F5C2
		Player.Animation = ANI_WALKING
		TempValue0 = Player.AbilityTimer
		TempValue0 >>= 16
		TempValue0 *= 80
		TempValue0 /= 6
		TempValue0 += 20
	else
		TempValue0 = Player.AbilityTimer
		TempValue0 >>= 16
		TempValue0 *= 80
		TempValue0 /= 6
		if Player.AbilityTimer > 0x9FFFF
			Player.Animation = ANI_PEELOUT
		else
			Player.Animation = ANI_RUNNING
		end if
	end if
	// Release
	if Player.Up == false
		Player.ScrollDelay = 15
		Screen.CameraStyle = CAMERA_HLOCK
		Player.State = PlayerObject_HandleGround
		// Cancels the peel out if you didn't charged it enough
		if Player.AbilityTimer < 0x5F5C2
			Player.Speed = 0
		else
			Player.Speed = Player.AbilityTimer
			if Player.Direction == FACING_LEFT
				FlipSign(Player.Speed)
			end if
			PlaySfx(7, 0)
		end if
		CallFunction(PlayerObject_ResetOnFloor)
				
#platform: Use_Haptics
		HapticEffect(42, 0, 0, 0)
#endplatform

	end if
	Player.AnimationSpeed = TempValue0
end function


function PlayerObject_HandlePeeloutCD
	// Moves the camera
	if Player.Direction == FACING_RIGHT
		Screen.CameraStyle = CAMERA_OFFSET_RIGHT
	else
		Screen.CameraStyle = CAMERA_OFFSET_LEFT
	end if
	// Cancels the Peel Out, keeps the camera
	if Player.Gravity == true
#platform: Use_Origins
		Player.State = PlayerObject_ResetDropDash
#endplatform

#platform: Use_Standalone
		Player.State = PlayerObject_HandleAir
#endplatform
		Player.Speed = 0
		Screen.CameraStyle = CAMERA_LOCK_CD_VIEW
	end if
	// Charge
	if Player.GravityStrength == 0x1000
		if Player.AbilityTimer < 0x60000
			Player.AbilityTimer += 0x6000
		end if
	else
		if Player.AbilityTimer < 0xC0000
			Player.AbilityTimer += 0x6000
		end if
	end if
	
	// Speed building, from walking to running then peelout
	if Player.AbilityTimer < 0x5F5C2
		Player.Animation = ANI_WALKING
		TempValue0 = Player.AbilityTimer
		TempValue0 >>= 16
		TempValue0 *= 80
		TempValue0 /= 6
		TempValue0 += 20
	else
		TempValue0 = Player.AbilityTimer
		TempValue0 >>= 16
		TempValue0 *= 80
		TempValue0 /= 6
		if Player.AbilityTimer > 0x9FFFF
			Player.Animation = ANI_PEELOUT
		else
			Player.Animation = ANI_RUNNING
		end if
	end if
	// Release
	if Player.Up == false
		Screen.CameraStyle = CAMERA_LOCK_CD_VIEW
		Player.State = PlayerObject_HandleGround
		// Cancels the peel out if you didn't charged it enough
		if Player.AbilityTimer < 0x5F5C2
			Player.Speed = 0
		else
			Player.Speed = Player.AbilityTimer
			if Player.Direction == FACING_LEFT
				FlipSign(Player.Speed)
			end if
			PlaySfx(7, 0)
		end if
		CallFunction(PlayerObject_ResetOnFloor)
				
#platform: Use_Haptics
		HapticEffect(42, 0, 0, 0)
#endplatform

	end if
	Player.AnimationSpeed = TempValue0
end function

// Tails flight
function PlayerObject_HandleTailsFlight
	CallFunction(PlayerObject_HandleAirSpeed)
	if Player.Gravity == GRAVITY_AIR
		Player.XVelocity = Player.Speed
		// Check if you have enough speed while flying to keep the warp
		if Warp.Destination > WARPDEST_NONE
			TempValue0 = Player.XVelocity
			if TempValue0 < 0
				FlipSign(TempValue0)
			end if

			TempValue1 = Player.YVelocity
			if TempValue1 < 0
				FlipSign(TempValue1)
			end if

			TempValue0 += TempValue1
			if TempValue0 < 0x40000
				if Warp.Timer > 99
					if Warp.Timer < 204
						Warp.Destination = WARPDEST_NONE
					end if
				end if
				Warp.Timer = 0
			end if
		end if
		if Player.YVelocity < -0x10000
			Player.FlightGravity = 0x800
		else
			if Player.YVelocity < 1
				if Player.AbilityTimer < 60
					Player.AbilityTimer++
				else
					Player.FlightGravity = 0x800
				end if
			end if
		end if
		Player.YVelocity += Player.FlightGravity
		if Player.Timer < 480
			if Player.GravityStrength == 0x3800
				Player.Animation = ANI_FLYING
			else
				Player.Animation = ANI_SWIMMING
			end if
			Player.Timer++
			if Player.Timer == 480
				if Player.GravityStrength == 0x3800
					Player.Animation = ANI_FLYINGTIRED
					StopSfx(24)
					PlaySfx(25, 1)
				else
					Player.Animation = ANI_SWIMMINGTIRED
				end if
			else
				if Player.JumpPress == true
					Player.FlightGravity = -0x2000
					Player.AbilityTimer = 0
				end if
			end if
		else
			if Player.GravityStrength == 0x3800
				Player.Animation = ANI_FLYINGTIRED
			else
				Player.Animation = ANI_SWIMMINGTIRED
			end if
		end if
	else
		Player.State = PlayerObject_HandleGround
		CallFunction(PlayerObject_ResetOnFloor)
	end if
	// If the level has a roof barrier, you're not getting too far
	if Player.RoofBarrier == true
		TempValue0 = Player.YPos
		TempValue0 >>= 16
		if TempValue0 < Player.CollisionBottom
			Player.YPos = Player.CollisionBottom
			Player.YPos <<= 16
		end if
	end if
end function

// Player Damage
function PlayerObject_Hurt
	ArrayPos0 = Player.EntityNo
	ArrayPos0 += 2
	// if you had a shield, remove it
	if Object[ArrayPos0].PropertyValue > 0
		TempValue0 = DAMAGE_SHIELDED
		ResetObjectEntity(ArrayPos0, TypeName[Blank Object], 0, 0, 0)
		PlaySfx(5, 0)
	else
		if Player.Rings == 0
			PlaySfx(5, 0)
			TempValue0 = DAMAGE_DEATH
		else
			PlaySfx(4, 0)
			TempValue0 = DAMAGE_HURT
		end if
	end if

	switch TempValue0
	case DAMAGE_SHIELDED
				
#platform: Use_Haptics
		HapticEffect(16, 0, 0, 0)
#endplatform

		Player.State = PlayerObject_Knockback
		Player.Animation = ANI_HURT
		Player.YVelocity = -0x40000
		Player.Gravity = GRAVITY_AIR
		Player.TrackScroll = true
		Player.Invincible = 8000
		if Player.GravityStrength == 0x1000
			Player.Speed >>= 1
			Player.YVelocity >>= 1
		end if
		break

	case DAMAGE_HURT
				
#platform: Use_Haptics
		HapticEffect(16, 0, 0, 0)
#endplatform

		if Player.CollisionPlane == COLLISION_PLANE_A
			TempValue4 = 3
		else
			TempValue4 = 1
		end if
		Player.State = PlayerObject_Knockback
		Player.Animation = ANI_HURT
		Player.YVelocity = -0x40000
		Player.Gravity = GRAVITY_AIR
		Player.TrackScroll = true
		Player.Invincible = 8000
		if Player.GravityStrength == 0x1000
			Player.Speed >>= 1
			Player.YVelocity >>= 1
		end if
		// Lose ring code
		TempValue0 = Player.Rings
		if TempValue0 > 16
			TempValue1 = TempValue0
			TempValue1 -= 16
			TempValue0 = 16
		else
			TempValue1 = 0
		end if

		if TempValue1 > 16
			TempValue1 = 16
		end if
		
		TempValue3 = TempValue1
		TempValue3 >>= 1
		TempValue3 <<= 5

		TempValue2 = 384
		TempValue2 -= TempValue3

		TempValue3 >>= 4
		if TempValue3 == TempValue1
			TempValue2 += 16
		else
			TempValue2 -= 16
		end if

		TempValue3 = 0
		while TempValue3 < TempValue1
			CreateTempObject(TypeName[LoseRing], Player.CollisionPlane, Player.XPos, Player.YPos)
			Cos(Object[TempObjectPos].XVelocity, TempValue2)
			Sin(Object[TempObjectPos].YVelocity, TempValue2)
			Object[TempObjectPos].XVelocity <<= 8
			Object[TempObjectPos].YVelocity <<= 8
			Object[TempObjectPos].DrawOrder = TempValue4
			Object[TempObjectPos].AnimationSpeed = 256
			TempValue3++
			TempValue2 += 32
		loop
		TempValue3 = TempValue0
		TempValue3 >>= 1
		TempValue3 <<= 5

		TempValue2 = 384
		TempValue2 -= TempValue3

		TempValue3 >>= 4
		if TempValue3 == TempValue0
			TempValue2 += 16
		else
			TempValue2 -= 16
		end if
		TempValue3 = 0

		while TempValue3 < TempValue0
			CreateTempObject(TypeName[LoseRing], Player.CollisionPlane, Player.XPos, Player.YPos)
			Cos(Object[TempObjectPos].XVelocity, TempValue2)
			Sin(Object[TempObjectPos].YVelocity, TempValue2)
			Object[TempObjectPos].XVelocity <<= 9
			Object[TempObjectPos].YVelocity <<= 9
			Object[TempObjectPos].DrawOrder = TempValue4
			Object[TempObjectPos].AnimationSpeed = 256
			TempValue3++
			TempValue2 += 32
		loop
		Player.Rings = 0
		Ring.ExtraLife = 100
		break

	case DAMAGE_DEATH
				
#platform: Use_Haptics
		HapticEffect(28, 0, 0, 0)
#endplatform

		Object.DrawOrder = 5
		Player.Speed = 0
		Player.YVelocity = -0x70000
		Player.XVelocity = 0
		Player.State = PlayerObject_Death
		Player.Animation = ANI_DYING
		Player.TileCollisions = false
		Player.ObjectInteraction = false
		if Player.EntityNo == 0	// Check if it's was player 1 who died......what?
			Screen.CameraEnabled = false
		end if
		break
	end switch
	// lose your warp-run if you receive damage
	if Warp.Destination > WARPDEST_NONE
		if Warp.Timer > 99
			if Warp.Timer < 204
				Warp.Destination = WARPDEST_NONE
			end if
		end if
		Warp.Timer = 0
	end if
end function


function PlayerObject_Knockback
	if Player.Gravity == GRAVITY_AIR
		Player.TrackScroll = true
		if Player.GravityStrength == 0x3800
			Player.YVelocity += 0x3000
		else
			Player.YVelocity += 0xF00
		end if
		Player.XVelocity = Player.Speed
	else
		Player.State = PlayerObject_HandleGround
		Player.Invincible = 120
		Player.BlinkTimer = 3
		Player.Speed = 0
		Player.XVelocity = 0
		CallFunction(PlayerObject_ResetOnFloor)
	end if
end function


function PlayerObject_OuttaHere
	// preparing to jump
	if Player.Timer < 140
		Player.Timer++
	else
		// The Jump.
		Player.Timer = 0
		Player.DrawOrder = 5
		if Player.Direction == FACING_RIGHT
			Player.Speed = 0x10000
			Player.XVelocity = 0x10000
		else
			Player.Speed = -0x10000
			Player.XVelocity = -0x10000
		end if
		Player.YVelocity = -0x58000
		Player.State = PlayerObject_Death
		Player.TileCollisions = false
		Player.ObjectInteraction = false
		Screen.CameraEnabled = false
	end if
end function

// YOU DIED.
function PlayerObject_Death
	Player.ControlMode = CONTROL_DISABLED
	Player.YVelocity += 0x3800
	// Don't override the bored animation
	if Player.Animation != ANI_BORED
		Player.Animation = ANI_DYING
	end if

	if Player.YVelocity > 0x100000
#platform: Use_Origins
		EngineCallback(NOTIFY_DEATH_EVENT)
#endplatform

		if Player.Lives > 0
			if Player.Animation == ANI_BORED	// Outta Here makes an automatic game over, no lifes will save you
				Player.Lives = 0
			else

#platform: Use_Origins
				if game.coinMode == false
					if game.playMode != BOOT_PLAYMODE_MISSION
						Player.Lives--
					endif
				endif
#endplatform

#platform: Use_Standalone
				Player.Lives--
#endplatform
			end if
		end if

		Stage.TimeEnabled = false
#platform: Use_Origins
		CheckEqual(game.playMode, BOOT_PLAYMODE_BOSSRUSH)
		TempValue0 = CheckResult
		CheckNotEqual(Player.Lives, 0)
		TempValue0  |= CheckResult
		CheckEqual(game.oneStageFlag, false)
		CheckResult |= TempValue0
#endplatform

#platform: Use_Standalone
		CheckResult = true	// Slight workaround to make this cleaner, the check below this comes from origins, but we need it to always be true on standalone
#endplatform

		if CheckResult != false
			Object.Type = TypeName[DeathEvent]
			DeathEvent.DrawOrder  = 7
			DeathEvent.Text1XPos  = Screen.CenterX
			DeathEvent.Text1XPos -= 232
			DeathEvent.Text2XPos  = Screen.CenterX
			DeathEvent.Text2XPos += 232
		end if

		if Options.GameMode == GAMEMODE_TIMEATTACK
			DeathEvent.Timer = 0
			DeathEvent.State = DEATHEVENT_TIMEATTACK
		else
			if Player.Lives == 0
				DeathEvent.Timer = -2880
				DeathEvent.State = 0
				PlayMusic(5)
				Stage.PauseEnabled = false
			else
				DeathEvent.Timer = 0
				DeathEvent.State = DEATHEVENT_FADEOUT
#platform: Use_Origins
				if game.coinMode == false
					if game.playMode != BOOT_PLAYMODE_BOSSRUSH
						if Stage.Minutes == 9
							if Stage.Seconds == 59
								DeathEvent.Timer = -2880
								Object.State = DEATHEVENT_GAMEOVER
								PlayMusic(5)
								Stage.PauseEnabled = false
							endif
						endif
					endif
				endif
#endplatform

#platform: Use_Standalone
				if Stage.Minutes == 9
					if Stage.Seconds == 59
						DeathEvent.Timer = -2880
						DeathEvent.State = DEATHEVENT_GAMEOVER
						PlayMusic(5)
						Stage.PauseEnabled = false
					end if					
				end if
#endplatform
			end if
		end if
	end if
end function

// Same as death, just slower and without the bored or time over stuff
function PlayerObject_Drown
	Player.ControlMode = CONTROL_DISABLED
	Player.YVelocity += Player.GravityStrength
	Player.Animation = ANI_DROWNING
	if Player.YVelocity > 0x80000

#platform: Use_Origins
		EngineCallback(NOTIFY_DEATH_EVENT)
		if game.coinMode == false
			if game.playMode != BOOT_PLAYMODE_MISSION
				if Player.Lives > 0
					Player.Lives--
				endif
			endif
		endif
#endplatform

#platform: Use_Standalone
		if Player.Lives > 0
			Player.Lives--
		end if
#endplatform

		Stage.TimeEnabled = false
		Object.Type = TypeName[DeathEvent]
		DeathEvent.DrawOrder  = 7
		DeathEvent.Text1XPos  = Screen.CenterX
		DeathEvent.Text1XPos -= 232
		DeathEvent.Text2XPos  = Screen.CenterX
		DeathEvent.Text2XPos += 232

		if Options.GameMode == GAMEMODE_TIMEATTACK
			DeathEvent.Timer = 0
			DeathEvent.State = DEATHEVENT_TIMEATTACK
		else
			if Player.Lives == 0
				DeathEvent.Timer = -2880
				DeathEvent.State = DEATHEVENT_CLASSIC_TIMEOVER
				PlayMusic(5)
				Stage.PauseEnabled = false
			else
				DeathEvent.Timer = 0
				DeathEvent.State = DEATHEVENT_FADEOUT
			end if
		end if
	end if
end function

// Wacky Workbench hanging bar gimmick
function PlayerObject_HangingBar
	if Player.Left == true
		Player.Direction = FACING_LEFT
		Player.Speed = -0x20000
		Player.AnimationSpeed = 30
	else
		if Player.Right == true
			Player.Direction = FACING_RIGHT
			Player.Speed = 0x20000
			Player.AnimationSpeed = 30
		else
			Player.Speed = 0
			Player.AnimationSpeed = 0
		end if
	end if

	TempValue1 = Player.XPos
	TempValue1 >>= 16

	TempValue2 = Player.YPos
	TempValue2 >>= 16
	TempValue2 += Player.CollisionTop
	// Check that you are in the hanging bar
	Get16x16TileInfo(TempValue0, TempValue1, TempValue2, 8)
	if TempValue0 != 3	// seems like you're not
		Player.State = PlayerObject_HandleAir
		Player.Speed = 0
		Player.AnimationSpeed = 0
		Player.YVelocity = 0
	end if

	// Manual Drop
	if Player.JumpPress == true
		

#platform: Use_Origins
		Player.State = PlayerObject_ResetDropDash
#endplatform

#platform: Use_Standalone
		Player.State = PlayerObject_HandleAir
#endplatform
		Player.YVelocity = 0
		Player.Speed = 0
		Player.AnimationSpeed = 0
		Player.YPos += 0x40000
	end if
	Player.XVelocity = Player.Speed
	// Cancel warp
	if Warp.Destination > WARPDEST_NONE
		if Warp.Timer > 99
			if Warp.Timer < 204
				Warp.Destination = WARPDEST_NONE
			end if
		end if

		Warp.Timer = 0
	end if
end function

// Unused leftover from Sonic Nexus (2008)
function PlayerObject_CorkscrewRun
	Player.Angle = 0
	CallFunction(PlayerObject_HandleMovement)
	Player.Animation = 34 // Corkscrew animation, it uses Nexus values and as such, it just looks like a jumbled mess in-game

	if Player.Speed < 0x60000
		if Player.Speed > -0x60000
			Player.Animation = ANI_WALKING
			
#platform: Use_Origins
			Player.State = PlayerObject_ResetDropDash
#endplatform

#platform: Use_Standalone
			Player.State = PlayerObject_HandleAir
#endplatform
			Player.Rotation = 0
			
			if Player.Speed < 0
				Player.Direction = FACING_LEFT
			end if
		end if
	end if

	if Player.Down == true
		if Player.Speed > 0x199A
			Player.State = PlayerObject_CorkscrewRoll
			Player.Animation = ANI_JUMPING
		end if

		if Player.Speed < -0x199A
			Player.State = PlayerObject_CorkscrewRoll
			Player.Animation = ANI_JUMPING
		end if
	end if

	if Player.Skidding > 0
		if Player.Skidding == 16
			PlaySfx(8, 0) // Would be Skidding SFX if using Nexus SFX list
		end if
		Player.Animation = ANI_SKIDDING
		Player.Skidding--
	end if

	if Player.JumpPress == true
		CallFunction(PlayerObject_StartJump)
	else
		CallFunction(PlayerObject_ResetOnFloor)
	end if
end function

// Unused leftover from Sonic Nexus (2008)
function PlayerObject_CorkscrewRoll
	Player.Angle = 0
	CallFunction(PlayerObject_HandleRollDecel)

	if Player.Speed < 0x60000
		if Player.Speed > -0x60000
#platform: Use_Origins
			Player.State = PlayerObject_ResetDropDash
#endplatform

#platform: Use_Standalone
			Player.State = PlayerObject_HandleAir
#endplatform
		end if
	end if

	if Player.JumpPress == true
		CallFunction(PlayerObject_StartJump)
	else
		CallFunction(PlayerObject_ResetOnFloor)
	end if
end function

// Tube Switch function
function PlayerObject_Tunnel
	if Player.Gravity == GRAVITY_AIR	// end the function if you are in the air
		

#platform: Use_Origins
		Player.State = PlayerObject_ResetDropDash
#endplatform

#platform: Use_Standalone
		Player.State = PlayerObject_HandleAir
#endplatform
		Player.Timer = 0
		CallFunction(PlayerObject_HandleAirMovement)
	else
		if Player.Speed > 0
			if Player.Speed < Player.MinRollSpeed
				Player.Speed = Player.MinRollSpeed
			end if
			if Player.Speed > 0x100000
				Player.Speed = 0x100000
			end if
		else
			TempValue0 = Player.MinRollSpeed
			FlipSign(TempValue0)
			if Player.Speed > TempValue0
				Player.Speed = TempValue0
				CallFunction(PlayerObject_ResetOnFloor)
			end if
			if Player.Speed < -0x100000
				Player.Speed = -0x100000
			end if
		end if

		TempValue0 = Player.Speed
		if TempValue0 < 0
			FlipSign(TempValue0)
		end if

		if TempValue0 < 0x5F5C2
			// Warp Star delete checks
			if Warp.Destination > WARPDEST_NONE
				if Warp.Timer > 99
					if Warp.Timer < 204
						Warp.Destination = WARPDEST_NONE
					end if
				end if
				Warp.Timer = 0
			end if
		else
			// Warp Star spawnning
			if Warp.Destination > WARPDEST_NONE
				if Warp.Timer == 0
					Warp.Timer = 1
					CreateTempObject(TypeName[WarpStar], 0, Player.XPos, Player.YPos)
					WarpStar.Timer = 7
					WarpStar.DrawOrder = 4
				end if
			end if
		end if

		CallFunction(PlayerObject_HandleRollDecel)
		CallFunction(PlayerObject_RollAnimSpeed)
		Player.AnimationSpeed = Player.CustomAnimSpeed
		CallFunction(PlayerObject_ResetOnFloor)
	end if
end function

// This is also for Tube Switch, but only for the ones used in Wacky Workbench and Stardust Speedway
function PlayerObject_StartTTCtrlLock
	Player.Right = false
	Player.Left = false
	if Player.Gravity == GRAVITY_AIR
		

#platform: Use_Origins
		Player.State = PlayerObject_ResetDropDash
#endplatform

#platform: Use_Standalone
		Player.State = PlayerObject_HandleAir
#endplatform
		Player.Timer = 0
		CallFunction(PlayerObject_HandleAirMovement)
	else
		if Player.Speed > 0
			Player.Speed = Player.MinRollSpeed
		else
			TempValue0 = Player.MinRollSpeed
			FlipSign(TempValue0)
			Player.Speed = TempValue0
		end if

		TempValue0 = Player.Speed
		if TempValue0 < 0
			FlipSign(TempValue0)
		end if

		if TempValue0 < 0x5F5C2
			if Warp.Destination > WARPDEST_NONE
				if Warp.Timer > 99
					if Warp.Timer < 204
						Warp.Destination = WARPDEST_NONE
					end if
				end if
				Warp.Timer = 0
			end if
		else
			if Warp.Destination > WARPDEST_NONE
				if Warp.Timer == 0
					Warp.Timer = 1
					CreateTempObject(TypeName[WarpStar], 0, Player.XPos, Player.YPos)
					WarpStar.Timer = 7
					WarpStar.DrawOrder = 4
				end if
			end if
		end if
		CallFunction(PlayerObject_HandleRollDecel)
		CallFunction(PlayerObject_RollAnimSpeed)
		Player.AnimationSpeed = Player.CustomAnimSpeed
		CallFunction(PlayerObject_ResetOnFloor)
	end if
end function

// Palmtree Panic and Wacky Workbench spinning tops
function PlayerObject_SpinningTop
	Player.Timer += Player.MinRollSpeed
	if Player.Gravity == GRAVITY_AIR	// Drop from them if you get out of range
		

#platform: Use_Origins
		Player.State = PlayerObject_ResetDropDash
#endplatform

#platform: Use_Standalone
		Player.State = PlayerObject_HandleAir
#endplatform
		Player.Animation = ANI_WALKING
		Player.Timer = 0
		CallFunction(PlayerObject_HandleAirMovement)
	else
		CallFunction(PlayerObject_ResetOnFloor)
	end if
end function

// Amy Rose's favorite function
function PlayerObject_Hugged
	if Player.Gravity == GRAVITY_AIR	// No hugs if you're in the air
		

#platform: Use_Origins
		Player.State = PlayerObject_ResetDropDash
#endplatform

#platform: Use_Standalone
		Player.State = PlayerObject_HandleAir
#endplatform
		Player.Animation = ANI_WALKING
		Player.Timer = 0
		CallFunction(PlayerObject_HandleAirMovement)
	else
		CallFunction(PlayerObject_ResetOnFloor)
		// Yes, the only thing the function does is make you wait
		if Player.Timer < 240
			Player.Animation = ANI_STOPPED
			Player.Timer++
		else
			Player.Animation = ANI_WAITING
		end if

		// Warp cancel check
		if Warp.Destination > WARPDEST_NONE
			if Warp.Timer > 99
				if Warp.Timer < 204
					Warp.Destination = WARPDEST_NONE
				end if
			end if
			Warp.Timer = 0
		end if
		// Get free from Amy
		if Player.JumpPress == true
			CallFunction(PlayerObject_StartJump)
		end if
	end if
end function

// Palmtree Panic Ramp
function PlayerObject_Handle3DRampAnims
	CallFunction(PlayerObject_HandleMovement)
	if Player.Gravity == GRAVITY_AIR
		

#platform: Use_Origins
		Player.State = PlayerObject_ResetDropDash
#endplatform

#platform: Use_Standalone
		Player.State = PlayerObject_HandleAir
#endplatform
		Player.Timer = 0
		CallFunction(PlayerObject_HandleAirMovement)
		// Set the equivalent animation for looking to the left
		if Player.Direction == FACING_LEFT

			if Player.Animation == ANI_RAMP_RUNNING3
				Player.Animation = ANI_RAMP_RUNNING5
			end if

			if Player.Animation == ANI_RAMP_RUNNING2
				Player.Animation = ANI_RAMP_RUNNING6
			end if

		end if
	else
		CallFunction(PlayerObject_ResetOnFloor)
		if Player.Speed == 0
			// Warp Star erase check
			if Warp.Destination > WARPDEST_NONE
				if Warp.Timer > 99
					if Warp.Timer < 204
						Warp.Destination = WARPDEST_NONE
					end if
				end if
				Warp.Timer = 0
			end if
			// Waiting timer while in the ramp
			if Player.Timer < 240
				Player.Animation = ANI_STOPPED
				Player.Timer++
			else
				Player.Animation = ANI_WAITING
			end if
		else
			// Set animation based on angle
			if Player.Angle == 0
				Player.Animation = ANI_RAMP_RUNNING1
			end if

			if Player.Angle > 200
				if Player.Direction == FACING_RIGHT
					Player.Animation = ANI_RAMP_RUNNING3
				else
					Player.Animation = ANI_RAMP_RUNNING5
				end if
			end if

			if Player.Angle > 216
				if Player.Direction == FACING_RIGHT
					Player.Animation = ANI_RAMP_RUNNING2
				else
					Player.Animation = ANI_RAMP_RUNNING6
				end if
			end if

			if Player.Angle > 232
				Player.Animation = ANI_RAMP_RUNNING1
			end if

			if Player.Angle == 192
				Player.Animation = ANI_RAMP_RUNNING4
			end if
		end if
		if Player.JumpPress == true
			CallFunction(PlayerObject_StartJump)
		else
			if Player.Up == true
				if Player.Speed == 0
					Player.State = PlayerObject_LookingUp
					Player.Animation = ANI_LOOKINGUP
					Player.Timer = 0
				end if
			end if
			if Player.Down == true
				if Player.Speed == 0
					Player.State = PlayerObject_Crouching
					Player.Animation = ANI_LOOKINGDOWN
					Player.Timer = 0
				else
					if Player.Speed >  0x199A
						Player.ControlLock = 0
						Player.State = PlayerObject_HandleRolling
						Player.Animation = ANI_JUMPING
					end if
					
					if Player.Speed < -0x199A
						Player.ControlLock = 0
						Player.State = PlayerObject_HandleRolling
						Player.Animation = ANI_JUMPING
					end if
				end if
			end if
		end if
	end if
	if Player.Animation != ANI_STOPPED
		Player.AnimationSpeed = Player.Speed
		if Player.AnimationSpeed < 0
			FlipSign(Player.AnimationSpeed)
		end if
		Player.AnimationSpeed *= 60
		Player.AnimationSpeed /= 0x60000
		Player.AnimationSpeed += 20
	else
		Player.AnimationSpeed = 0
	end if
end function

function PlayerObject_SizeChange
	if Player.Gravity == GRAVITY_AIR	// Knockback after touching the laser
		Player.TrackScroll = true
		Player.YVelocity += 0x3000
		Player.XVelocity = Player.Speed
	else
		Player.State = PlayerObject_HandleGround
		Player.Invincible = 120
		Player.BlinkTimer = 3
		Player.Speed = 0
		Player.XVelocity = 0
		CallFunction(PlayerObject_ResetOnFloor)
		if Mini_PlayerFlag == false
			Mini_PlayerFlag = true
			Player.CameraOffset = -1
			switch Stage.PlayerListPos
			case 0
				LoadAnimation("MiniSonic.Ani")
				break
			case 1
				LoadAnimation("MiniTails.Ani")
				Object[1].Type = TypeName[Blank Object]	// Deletes TailsObject
				break
			end switch
		else
			Mini_PlayerFlag = false
			switch Stage.PlayerListPos
			case 0
				LoadAnimation("Sonic.Ani")
				Player.CameraOffset = -5
				break
			case 1
				LoadAnimation("Tails.Ani")
				Player.CameraOffset = -1
				Object[1].Type = TypeName[TailsObject]	// Restores TailsObject
				break
			end switch
		end if
		BindPlayerToObject(0, 0)
	end if
end function

function PlayerObject_HandleDropDash
	if Player.DropDashCharge >= 0
		if Player.DropDashCharge == 0
			if Player.JumpPress == true
				if Stage.PlayerListPos == 0	// PlayerName[SONIC]
					Player.DropDashCharge =  1
				else
					Player.DropDashCharge = -1
				endif
			endif
		else
			if Player.JumpHold == false
				Player.DropDashCharge = -1
			else
				Player.DropDashCharge++
				if Player.DropDashCharge == 20
					PlaySfx(28, 0)
				endif
				
				if Player.DropDashCharge >= 20
					if Player.Animation == ANI_JUMPING
						Player.Frame = 0
						Player.AnimationTimer = 0
						Player.AnimationSpeed = 0
					endif
				endif
			endif
		endif
	endif
endfunction


sub ObjectMain
	if Stage.DebugMode == true
		if KeyPress[1].ButtonB == true	// Turn Debug Mode
			// Only PC had access to debug mode
#platform: Standard
			Object.Type = TypeName[DebugMode]
			if Stage.PlayerListPos == 1
				Object[+1].Type = TypeName[Blank Object]
			end if
			Player.YVelocity = 0
			Player.State = PlayerObject_Blank
			Player.Frame = 0
			Player.Rotation = 0
			Player.ObjectInteraction = false
			Player.TileCollisions = true
			Player.DrawOrder = 4
			Player.AbilityTimer = 0
			Player.MinRollSpeed = 0
			Screen.CameraEnabled = true
			Screen.CameraStyle = Options.OriginalControls
#endplatform
		else
			// Handle Player
			CallFunction(PlayerObject_ProcessPlayer)
			CallFunction(Player.State)
			ProcessAnimation()
			if Player.Animation == ANI_JUMPING
				Screen.AdjustCameraY = Player.CameraOffset
			else
				if Screen.AdjustCameraY == Player.CameraOffset
					Screen.AdjustCameraY = 0
					Player.iYPos += Player.CameraOffset
				end if
			end if
			if Player.YVelocity > 0x100000
				Player.YVelocity = 0x100000
			end if
			PlayerTileCollision()
			if CheckResult == true
				if Player.Animation == ANI_JUMPING
					if Player.Down == false
						Player.Animation = ANI_WALKING
						Screen.AdjustCameraY = 0
						Player.iYPos += Player.CameraOffset
					end if
				end if
			end if
		end if
	else
		// Mobile version ObjectMain starts here, since there wasn't a debug mode
		// Handle Player
		CallFunction(PlayerObject_ProcessPlayer)
		CallFunction(Player.State)

#platform: Use_Origins
		if Player.DropDashCharge >= 20
			if Player.Animation == ANI_JUMPING
				Player.Frame = 0
				Player.AnimationTimer = 0
				Player.AnimationSpeed = 1
			endif
		endif
#endplatform

		ProcessAnimation()

		if Player.Animation == ANI_JUMPING
			Screen.AdjustCameraY = Player.CameraOffset
		else
			if Screen.AdjustCameraY == Player.CameraOffset
				Screen.AdjustCameraY = 0
				Player.iYPos += Player.CameraOffset
			end if
		end if

		if Player.YVelocity > 0x100000
			Player.YVelocity = 0x100000
		end if

		PlayerTileCollision()
		if CheckResult == true
			if Player.Animation == ANI_JUMPING
				if Player.Down == false
					Player.Animation = ANI_WALKING
					Screen.AdjustCameraY = 0
					Player.iYPos += Player.CameraOffset
				end if
			end if
		end if
	end if
end sub


sub ObjectDraw
	if Player.Animation != Player.PrevAnimation
		Player.PrevAnimation = Player.Animation
		Player.Frame = 0
		Player.AnimationTimer = 0
		Player.AnimationSpeed = 0
	end if
	
	DrawPlayerAnimation()
end sub


sub ObjectStartup
	ArrayPos0 = 32
	while ArrayPos0 < 1056
		if Object[ArrayPos0].Type == TypeName[Player Object]
			switch Stage.PlayerListPos
			case PLAYER_SONIC
				ResetObjectEntity(0, TypeName[Player Object], 0, Object[ArrayPos0].XPos, Object[ArrayPos0].YPos)
				Player.XPos = Object[ArrayPos0].XPos
				Player.YPos = Object[ArrayPos0].YPos
				
				LoadAnimation("Sonic.Ani")
				BindPlayerToObject(0, 0)

#platform: Use_Origins
				Player.State = PlayerObject_ResetDropDash
#endplatform

#platform: Use_Standalone
				Player.State = PlayerObject_HandleAir
#endplatform

				Player.Priority = PRIORITY_ACTIVE

				Player.DrawOrder = 4

				Player.TopSpeed				=  0x60000
				Player.Acceleration			=  0xC00
				Player.Deceleration			=  0xC00
				Player.AirAcceleration		=  0x1800
				Player.AirDeceleration		=  0x600
				Player.GravityStrength		=  0x3800
				Player.JumpStrength			=  0x68000
				Player.JumpCap				= -0x40000
				Player.RollingDeceleration	=  0x2000

				Player.CameraOffset = -5

				Player.FlightFunction = PlayerObject_Blank
				if Options.OriginalControls == false
					Player.PeeloutFunction = PlayerObject_StartPeeloutS2
					Player.SpindashFunction = PlayerObject_StartSpindashS2
				else
					Player.PeeloutFunction = PlayerObject_StartPeeloutCD
					Player.SpindashFunction = PlayerObject_StartSpindashCD
				end if
				break
				
			case PLAYER_TAILS
				ResetObjectEntity(0, TypeName[Player Object], 0, Object[ArrayPos0].XPos, Object[ArrayPos0].YPos)
				Player.XPos = Object[ArrayPos0].XPos
				Player.YPos = Object[ArrayPos0].YPos

				LoadAnimation("Tails.Ani")
				BindPlayerToObject(0, 0)

#platform: Use_Origins
				Player.State = PlayerObject_ResetDropDash
#endplatform

#platform: Use_Standalone
				Player.State = PlayerObject_HandleAir
#endplatform

				Player.Priority = PRIORITY_ACTIVE

				Player.DrawOrder = 4

				Player.TopSpeed				=  0x60000
				Player.Acceleration			=  0xC00
				Player.Deceleration			=  0xC00
				Player.AirAcceleration		=  0x1800
				Player.AirDeceleration		=  0x600
				Player.GravityStrength		=  0x3800
				Player.JumpStrength			=  0x68000
				Player.JumpCap				= -0x40000
				Player.RollingDeceleration	=  0x2000

				Player.CameraOffset = -1
				
				Player.FlightFunction = PlayerObject_StartTailsFlight
				Player.PeeloutFunction = PlayerObject_StartJump
				if Options.OriginalControls == false
					Player.SpindashFunction = PlayerObject_StartSpindashS2
				else
					Player.SpindashFunction = PlayerObject_StartSpindashCD
				end if
				break
			end switch
			GetAnimationByName(ANI_SPINNING_TOP, "Spinning Top")
			GetAnimationByName(ANI_RAMP_RUNNING1, "3D Ramp 1")
			GetAnimationByName(ANI_RAMP_RUNNING2, "3D Ramp 2")
			GetAnimationByName(ANI_RAMP_RUNNING3, "3D Ramp 3")
			GetAnimationByName(ANI_RAMP_RUNNING4, "3D Ramp 4")
			GetAnimationByName(ANI_RAMP_RUNNING5, "3D Ramp 5")
			GetAnimationByName(ANI_RAMP_RUNNING6, "3D Ramp 6")
			GetAnimationByName(ANI_ROLL3D, "3D Ramp 7")
			GetAnimationByName(ANI_SIZE_CHANGE, "Size Change")
			ResetObjectEntity(ArrayPos0, TypeName[Blank Object], 0, 0, 0)
		end if
		ArrayPos0++
	loop
end sub

// ========================
// Editor Subs
// ========================

sub RSDKDraw
	DrawSprite(0)
end sub

sub RSDKLoad
	LoadSpriteSheet("Players/Sonic1.gif")
	SpriteFrame(-16, -19, 28, 39, 1, 1)

	SetVariableAlias(ALIAS_VAR_PROPVAL, "unused")
end sub
