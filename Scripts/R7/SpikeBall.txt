//-----------------Sonic CD Spike Ball Script-----------------//
//--------Scripted by Christian Whitehead 'The Taxman'--------//
//-------Unpacked By Rubberduckycooly's Script Unpacker-------//

// Aliases

// Either X or Y-based, depending on the Object's Property Value
#alias Object.Value2 : Object.Velocity

// Value3 is unused...

// Timers
// (These count towards the "Time" values, at which point states switch)
#alias Object.Value0 : Object.PauseTimer
#alias Object.Value1 : Object.SpikesOutTimer

// Durations
// (How long, in frames, the SpikeBall will do the action for)
#alias Object.Value4 : Object.ShootTime
#alias Object.Value5 : Object.RetractTime
#alias Object.Value6 : Object.PauseTime

#alias 0 : SPIKEBALL_H_MOVERIGHT
#alias 1 : SPIKEBALL_H_PAUSERIGHT
#alias 2 : SPIKEBALL_H_MOVELEFT
#alias 3 : SPIKEBALL_H_PAUSELEFT

#alias 4 : SPIKEBALL_V_MOVEDOWN
#alias 5 : SPIKEBALL_V_PAUSEDOWN
#alias 6 : SPIKEBALL_V_MOVEUP
#alias 7 : SPIKEBALL_V_PAUSEUP


sub ObjectMain

	switch Object.State
	
	// Horizontal Spike Ball States
	case SPIKEBALL_H_MOVERIGHT
		if Object.SpikesOutTimer < Object.ShootTime
			Object.SpikesOutTimer++
			Object.XPos += Object.Velocity
		else
			Object.State++
		end if
		break
		
	case SPIKEBALL_H_PAUSERIGHT
		if Object.PauseTimer < Object.PauseTime
			Object.PauseTimer++
		else
			Object.PauseTimer = 0
			Object.State++
		end if
		break
		
	case SPIKEBALL_H_MOVELEFT
		if Object.SpikesOutTimer > Object.RetractTime
			Object.SpikesOutTimer--
			Object.XPos -= Object.Velocity
		else
			Object.State++
		end if
		break
		
	case SPIKEBALL_H_PAUSELEFT
		if Object.PauseTimer < Object.PauseTime
			Object.PauseTimer++
		else
			Object.PauseTimer = 0
			Object.State = SPIKEBALL_H_MOVERIGHT
		end if
		break


	// Vertical Spike Ball States
	case SPIKEBALL_V_MOVEDOWN
		if Object.SpikesOutTimer < Object.ShootTime
			Object.SpikesOutTimer++
			Object.YPos += Object.Velocity
		else
			Object.State++
		end if
		break
		
	case SPIKEBALL_V_PAUSEDOWN
		if Object.PauseTimer < Object.PauseTime
			Object.PauseTimer++
		else
			Object.PauseTimer = 0
			Object.State++
		end if
		break
		
	case SPIKEBALL_V_MOVEUP
		if Object.SpikesOutTimer > Object.RetractTime
			Object.SpikesOutTimer--
			Object.YPos -= Object.Velocity
		else
			Object.State++
		end if
		break
		
	case SPIKEBALL_V_PAUSEUP
		if Object.PauseTimer < Object.PauseTime
			Object.PauseTimer++
		else
			Object.PauseTimer = 0
			Object.State = SPIKEBALL_V_MOVEDOWN
		end if
		break
		
	end switch
	
end sub


sub ObjectPlayerInteraction
	
	PlayerObjectCollision(C_TOUCH, -12, -12, 12, 12)

	if CheckResult == true
		CallFunction(Player_Hit)
	end if

end sub


sub ObjectDraw
	DrawSprite(0)
end sub


sub ObjectStartup
	LoadSpriteSheet("R7/Objects.gif")
	
	// Spike Ball Frame
	SpriteFrame(-16, -16, 32, 32, 1, 199)
	
	ArrayPos0 = 32
	while ArrayPos0 < 1056
		if Object[ArrayPos0].Type == TypeName[SpikeBall]
			if Object[ArrayPos0].PropertyValue == 1
				Object[ArrayPos0].State = 4
				switch Object[24].PropertyValue
				case 0
					// Present
					Object[ArrayPos0].Velocity = 0x20000
					Object[ArrayPos0].ShootTime = 16
					Object[ArrayPos0].RetractTime = -16
					Object[ArrayPos0].PauseTime = 40
					break
					
				case 1
					// Past
					Object[ArrayPos0].Velocity = 0x40000
					Object[ArrayPos0].ShootTime = 8
					Object[ArrayPos0].RetractTime = -8
					Object[ArrayPos0].PauseTime = 60
					break
					
				case 2
				case 3
					// Futures
					Object[ArrayPos0].Velocity = 0x10000
					Object[ArrayPos0].ShootTime = 32
					Object[ArrayPos0].RetractTime = -32
					Object[ArrayPos0].PauseTime = 20
					break
					
				end switch
			else
				switch Object[24].PropertyValue
				case 0
					// Present
					Object[ArrayPos0].Velocity = 0x20000
					Object[ArrayPos0].ShootTime = 24
					Object[ArrayPos0].RetractTime = -24
					Object[ArrayPos0].PauseTime = 40
					break
					
				case 1
					// Past
					Object[ArrayPos0].Velocity = 0x40000
					Object[ArrayPos0].ShootTime = 12
					Object[ArrayPos0].RetractTime = -12
					Object[ArrayPos0].PauseTime = 60
					break
					
				case 2
				case 3
					// Futures
					Object[ArrayPos0].Velocity = 0x10000
					Object[ArrayPos0].ShootTime = 48
					Object[ArrayPos0].RetractTime = -48
					Object[ArrayPos0].PauseTime = 20
					break
					
				end switch
			end if
		end if
		
		ArrayPos0++
	loop
	
end sub


// ========================
// Editor Subs
// ========================

sub RSDKEdit
	if Editor.ReturnVariable == true
		switch Editor.VariableID
		case EDIT_VAR_PROPVAL // Property Value
			CheckResult = Object.PropertyValue
			break
		case 0 // Type
			CheckResult = Object.PropertyValue
			break
		end switch
	else
		switch Editor.variableID
		case EDIT_VAR_PROPVAL // Property Value
			Object.PropertyValue = Editor.VariableValue
			break
		case 0 // Type
			Object.PropertyValue = Editor.VariableValue
			break
		end switch
	end if
end sub


sub RSDKDraw
	DrawSprite(0)
	
	// TODO: it would be cool to see the path of the spike ball via an arrow
	// however, spike movement is dependant on time period, so that complicates things...
end sub


sub RSDKLoad
	LoadSpriteSheet("R7/Objects.gif")
	SpriteFrame(-16, -16, 32, 32, 1, 199)

	AddEditorVariable("Type")
	SetActiveVariable("Type")
	AddEnumVariable("Horizontal", 0)
	AddEnumVariable("Vertical",   1)
end sub
